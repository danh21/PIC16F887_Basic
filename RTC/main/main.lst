CCS PCM C Compiler, Version 5.015, 5967               17-Sep-23 17:39

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\RTC\main\main.lst

               ROM used:   658 words (8%)
                           Largest free fragment is 2048
               RAM used:   31 (8%) at main() level
                           67 (18%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   245
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
018C:  MOVF   57,W
018D:  CLRF   78
018E:  SUBWF  56,W
018F:  BTFSC  03.0
0190:  GOTO   194
0191:  MOVF   56,W
0192:  MOVWF  77
0193:  GOTO   1A0
0194:  CLRF   77
0195:  MOVLW  08
0196:  MOVWF  58
0197:  RLF    56,F
0198:  RLF    77,F
0199:  MOVF   57,W
019A:  SUBWF  77,W
019B:  BTFSC  03.0
019C:  MOVWF  77
019D:  RLF    78,F
019E:  DECFSZ 58,F
019F:  GOTO   197
01A0:  RETURN
01A1:  MOVF   20,W
01A2:  MOVWF  04
01A3:  BCF    03.7
01A4:  BTFSC  21.0
01A5:  BSF    03.7
01A6:  MOVF   56,W
01A7:  MOVWF  00
01A8:  INCF   04,F
01A9:  CLRF   00
01AA:  INCF   20,F
01AB:  BTFSC  03.2
01AC:  INCF   21,F
01AD:  RETURN
01AE:  MOVLW  20
01AF:  BTFSS  51.4
01B0:  MOVLW  30
01B1:  MOVWF  52
01B2:  MOVF   50,W
01B3:  MOVWF  77
01B4:  BTFSS  50.7
01B5:  GOTO   1BE
01B6:  COMF   77,F
01B7:  INCF   77,F
01B8:  MOVF   77,W
01B9:  MOVWF  50
01BA:  MOVLW  2D
01BB:  MOVWF  52
01BC:  BSF    51.7
01BD:  BSF    51.0
01BE:  MOVF   50,W
01BF:  MOVWF  56
01C0:  MOVLW  64
01C1:  MOVWF  57
01C2:  CALL   18C
01C3:  MOVF   77,W
01C4:  MOVWF  50
01C5:  MOVLW  30
01C6:  ADDWF  78,W
01C7:  MOVWF  53
01C8:  MOVF   50,W
01C9:  MOVWF  56
01CA:  MOVLW  0A
01CB:  MOVWF  57
01CC:  CALL   18C
01CD:  MOVLW  30
01CE:  ADDWF  77,W
01CF:  MOVWF  55
01D0:  MOVLW  30
01D1:  ADDWF  78,W
01D2:  MOVWF  54
01D3:  MOVF   52,W
01D4:  MOVWF  77
01D5:  MOVLW  30
01D6:  SUBWF  53,W
01D7:  BTFSC  03.2
01D8:  GOTO   1DD
01D9:  BSF    51.1
01DA:  BTFSC  51.7
01DB:  BSF    51.2
01DC:  GOTO   1F1
01DD:  BTFSC  51.2
01DE:  GOTO   1F1
01DF:  MOVF   52,W
01E0:  MOVWF  53
01E1:  BTFSC  51.1
01E2:  GOTO   1E8
01E3:  MOVLW  30
01E4:  SUBWF  54,W
01E5:  BTFSC  03.2
01E6:  GOTO   1EB
01E7:  BSF    51.0
01E8:  BTFSC  51.7
01E9:  BSF    51.1
01EA:  GOTO   1F1
01EB:  BTFSS  03.2
01EC:  BSF    51.0
01ED:  BTFSS  03.2
01EE:  GOTO   1F1
01EF:  MOVF   53,W
01F0:  MOVWF  54
01F1:  BTFSC  51.2
01F2:  GOTO   1F8
01F3:  BTFSC  51.1
01F4:  GOTO   1FB
01F5:  BTFSC  51.0
01F6:  GOTO   1FE
01F7:  GOTO   201
01F8:  MOVF   52,W
01F9:  MOVWF  56
01FA:  CALL   1A1
01FB:  MOVF   53,W
01FC:  MOVWF  56
01FD:  CALL   1A1
01FE:  MOVF   54,W
01FF:  MOVWF  56
0200:  CALL   1A1
0201:  MOVF   55,W
0202:  MOVWF  56
0203:  CALL   1A1
0204:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES HS                       // thach anh ngoai toc do cao 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
001C:  MOVLW  54
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   02F
0022:  MOVLW  06
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  7B
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 00,F
002E:  GOTO   022
002F:  RETURN
....................  
....................  
....................  
.................... #define LCD_RS_PIN      PIN_D1 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... #define NULL 0 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0099:  BSF    08.4
....................    output_float(LCD_DATA5); 
009A:  BSF    08.5
....................    output_float(LCD_DATA6); 
009B:  BSF    08.6
....................    output_float(LCD_DATA7); 
009C:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009D:  BCF    03.5
009E:  BSF    08.2
009F:  BSF    03.5
00A0:  BCF    08.2
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    08.3
00A4:  BSF    03.5
00A5:  BCF    08.3
....................    delay_cycles(1); 
00A6:  NOP
....................    high = lcd_read_nibble(); 
00A7:  BCF    03.5
00A8:  CALL   060
00A9:  MOVF   78,W
00AA:  MOVWF  5B
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    08.3
00AC:  BSF    03.5
00AD:  BCF    08.3
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_enable(1); 
00AF:  BCF    03.5
00B0:  BSF    08.3
00B1:  BSF    03.5
00B2:  BCF    08.3
....................    delay_us(1); 
00B3:  GOTO   0B4
00B4:  GOTO   0B5
00B5:  NOP
....................    low = lcd_read_nibble(); 
00B6:  BCF    03.5
00B7:  CALL   060
00B8:  MOVF   78,W
00B9:  MOVWF  5A
....................        
....................    lcd_output_enable(0); 
00BA:  BCF    08.3
00BB:  BSF    03.5
00BC:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BD:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00BE:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00BF:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00C0:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C1:  BCF    03.5
00C2:  SWAPF  5B,W
00C3:  MOVWF  77
00C4:  MOVLW  F0
00C5:  ANDWF  77,F
00C6:  MOVF   77,W
00C7:  IORWF  5A,W
00C8:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0060:  CLRF   5C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0061:  BSF    03.5
0062:  BSF    08.4
0063:  MOVLW  00
0064:  BCF    03.5
0065:  BTFSC  08.4
0066:  MOVLW  01
0067:  IORWF  5C,F
....................    n |= input(LCD_DATA5) << 1; 
0068:  BSF    03.5
0069:  BSF    08.5
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.5
006D:  MOVLW  01
006E:  MOVWF  77
006F:  BCF    03.0
0070:  RLF    77,F
0071:  MOVF   77,W
0072:  IORWF  5C,F
....................    n |= input(LCD_DATA6) << 2; 
0073:  BSF    03.5
0074:  BSF    08.6
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.6
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  FC
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  5C,F
....................    n |= input(LCD_DATA7) << 3; 
0080:  BSF    03.5
0081:  BSF    08.7
0082:  MOVLW  00
0083:  BCF    03.5
0084:  BTFSC  08.7
0085:  MOVLW  01
0086:  MOVWF  77
0087:  RLF    77,F
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  F8
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  IORWF  5C,F
....................     
....................    return(n); 
008E:  MOVF   5C,W
008F:  MOVWF  78
....................   #else 
0090:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0030:  BTFSC  5B.0
0031:  GOTO   034
0032:  BCF    08.4
0033:  GOTO   035
0034:  BSF    08.4
0035:  BSF    03.5
0036:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0037:  BCF    03.5
0038:  BTFSC  5B.1
0039:  GOTO   03C
003A:  BCF    08.5
003B:  GOTO   03D
003C:  BSF    08.5
003D:  BSF    03.5
003E:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003F:  BCF    03.5
0040:  BTFSC  5B.2
0041:  GOTO   044
0042:  BCF    08.6
0043:  GOTO   045
0044:  BSF    08.6
0045:  BSF    03.5
0046:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0047:  BCF    03.5
0048:  BTFSC  5B.3
0049:  GOTO   04C
004A:  BCF    08.7
004B:  GOTO   04D
004C:  BSF    08.7
004D:  BSF    03.5
004E:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BCF    03.5
0051:  BSF    08.3
0052:  BSF    03.5
0053:  BCF    08.3
....................    delay_us(2); 
0054:  MOVLW  02
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  GOTO   059
0059:  NOP
....................    lcd_output_enable(0); 
005A:  BCF    03.5
005B:  BCF    08.3
005C:  BSF    03.5
005D:  BCF    08.3
005E:  BCF    03.5
005F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0091:  BSF    03.5
0092:  BCF    08.3
....................    lcd_rs_tris(); 
0093:  BCF    08.1
....................    lcd_rw_tris(); 
0094:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0095:  BCF    03.5
0096:  BCF    08.1
0097:  BSF    03.5
0098:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C9:  MOVF   78,W
00CA:  MOVWF  5A
00CB:  BTFSS  5A.7
00CC:  GOTO   0CF
00CD:  BSF    03.5
00CE:  GOTO   099
....................    lcd_output_rs(address); 
00CF:  MOVF   58,F
00D0:  BTFSS  03.2
00D1:  GOTO   0D4
00D2:  BCF    08.1
00D3:  GOTO   0D5
00D4:  BSF    08.1
00D5:  BSF    03.5
00D6:  BCF    08.1
....................    delay_cycles(1); 
00D7:  NOP
....................    lcd_output_rw(0); 
00D8:  BCF    03.5
00D9:  BCF    08.2
00DA:  BSF    03.5
00DB:  BCF    08.2
....................    delay_cycles(1); 
00DC:  NOP
....................    lcd_output_enable(0); 
00DD:  BCF    03.5
00DE:  BCF    08.3
00DF:  BSF    03.5
00E0:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00E1:  BCF    03.5
00E2:  SWAPF  59,W
00E3:  MOVWF  5A
00E4:  MOVLW  0F
00E5:  ANDWF  5A,F
00E6:  MOVF   5A,W
00E7:  MOVWF  5B
00E8:  CALL   030
....................    lcd_send_nibble(n & 0xf); 
00E9:  MOVF   59,W
00EA:  ANDLW  0F
00EB:  MOVWF  5A
00EC:  MOVWF  5B
00ED:  CALL   030
00EE:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00EF:  MOVLW  28
00F0:  MOVWF  3A
00F1:  MOVLW  0C
00F2:  MOVWF  3B
00F3:  MOVLW  01
00F4:  MOVWF  3C
00F5:  MOVLW  06
00F6:  MOVWF  3D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F7:  BCF    08.3
00F8:  BSF    03.5
00F9:  BCF    08.3
....................    lcd_output_rs(0); 
00FA:  BCF    03.5
00FB:  BCF    08.1
00FC:  BSF    03.5
00FD:  BCF    08.1
....................    lcd_output_rw(0); 
00FE:  BCF    03.5
00FF:  BCF    08.2
0100:  BSF    03.5
0101:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0102:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0103:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0104:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0105:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0106:  BCF    08.3
....................    lcd_rs_tris(); 
0107:  BCF    08.1
....................    lcd_rw_tris(); 
0108:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0109:  MOVLW  0F
010A:  BCF    03.5
010B:  MOVWF  54
010C:  CALL   01C
....................    for(i=1;i<=3;++i) 
010D:  MOVLW  01
010E:  MOVWF  39
010F:  MOVF   39,W
0110:  SUBLW  03
0111:  BTFSS  03.0
0112:  GOTO   11B
....................    { 
....................        lcd_send_nibble(3); 
0113:  MOVLW  03
0114:  MOVWF  5B
0115:  CALL   030
....................        delay_ms(5); 
0116:  MOVLW  05
0117:  MOVWF  54
0118:  CALL   01C
0119:  INCF   39,F
011A:  GOTO   10F
....................    } 
....................     
....................    lcd_send_nibble(2); 
011B:  MOVLW  02
011C:  MOVWF  5B
011D:  CALL   030
....................    delay_ms(5); 
011E:  MOVLW  05
011F:  MOVWF  54
0120:  CALL   01C
....................    for(i=0;i<=3;++i) 
0121:  CLRF   39
0122:  MOVF   39,W
0123:  SUBLW  03
0124:  BTFSS  03.0
0125:  GOTO   132
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0126:  MOVLW  3A
0127:  ADDWF  39,W
0128:  MOVWF  04
0129:  BCF    03.7
012A:  MOVF   00,W
012B:  MOVWF  3E
012C:  CLRF   58
012D:  MOVF   3E,W
012E:  MOVWF  59
012F:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0130:  INCF   39,F
0131:  GOTO   122
0132:  BCF    0A.3
0133:  BCF    0A.4
0134:  GOTO   279 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0135:  DECFSZ 55,W
0136:  GOTO   138
0137:  GOTO   13B
....................       address=LCD_LINE_TWO; 
0138:  MOVLW  40
0139:  MOVWF  56
013A:  GOTO   13C
....................    else 
....................       address=0; 
013B:  CLRF   56
....................       
....................    address+=x-1; 
013C:  MOVLW  01
013D:  SUBWF  54,W
013E:  ADDWF  56,F
....................    lcd_send_byte(0,0x80|address); 
013F:  MOVF   56,W
0140:  IORLW  80
0141:  MOVWF  57
0142:  CLRF   58
0143:  MOVF   57,W
0144:  MOVWF  59
0145:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0146:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
015C:  MOVF   53,W
015D:  XORLW  07
015E:  BTFSC  03.2
015F:  GOTO   16A
0160:  XORLW  0B
0161:  BTFSC  03.2
0162:  GOTO   16F
0163:  XORLW  06
0164:  BTFSC  03.2
0165:  GOTO   177
0166:  XORLW  02
0167:  BTFSC  03.2
0168:  GOTO   17D
0169:  GOTO   182
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
016A:  MOVLW  01
016B:  MOVWF  54
016C:  MOVWF  55
016D:  CALL   135
016E:  GOTO   187
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
016F:  CLRF   58
0170:  MOVLW  01
0171:  MOVWF  59
0172:  CALL   091
....................                      delay_ms(2); 
0173:  MOVLW  02
0174:  MOVWF  54
0175:  CALL   01C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0176:  GOTO   187
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0177:  MOVLW  01
0178:  MOVWF  54
0179:  MOVLW  02
017A:  MOVWF  55
017B:  CALL   135
017C:  GOTO   187
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
017D:  CLRF   58
017E:  MOVLW  10
017F:  MOVWF  59
0180:  CALL   091
0181:  GOTO   187
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0182:  MOVLW  01
0183:  MOVWF  58
0184:  MOVF   53,W
0185:  MOVWF  59
0186:  CALL   091
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_byte(0,0x01); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_puts(char *str) 
.................... { 
....................    while(*str!=NULL) 
*
0147:  MOVF   51,W
0148:  MOVWF  7A
0149:  MOVF   50,W
014A:  MOVWF  04
014B:  BCF    03.7
014C:  BTFSC  7A.0
014D:  BSF    03.7
014E:  MOVF   00,F
014F:  BTFSC  03.2
0150:  GOTO   18B
....................    { 
....................       lcd_putc(*str); 
0151:  MOVF   51,W
0152:  MOVWF  7A
0153:  MOVF   50,W
0154:  MOVWF  04
0155:  BCF    03.7
0156:  BTFSC  7A.0
0157:  BSF    03.7
0158:  MOVF   00,W
0159:  MOVWF  52
015A:  MOVF   52,W
015B:  MOVWF  53
....................       str++; 
*
0187:  INCF   50,F
0188:  BTFSC  03.2
0189:  INCF   51,F
018A:  GOTO   147
....................    } 
018B:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... #define initHour     21 
.................... #define initMinute   12 
.................... #define initSecond   9 
....................  
.................... void init_RTC(int *hour, int *min, int *sec) 
.................... { 
....................    *hour = initHour; 
*
0004:  MOVF   39,W
0005:  MOVWF  04
0006:  BCF    03.7
0007:  BTFSC  3A.0
0008:  BSF    03.7
0009:  MOVLW  15
000A:  MOVWF  00
....................    *min = initMinute; 
000B:  MOVF   3B,W
000C:  MOVWF  04
000D:  BCF    03.7
000E:  BTFSC  3C.0
000F:  BSF    03.7
0010:  MOVLW  0C
0011:  MOVWF  00
....................    *sec = initSecond; 
0012:  MOVF   3D,W
0013:  MOVWF  04
0014:  BCF    03.7
0015:  BTFSC  3E.0
0016:  BSF    03.7
0017:  MOVLW  09
0018:  MOVWF  00
0019:  BCF    0A.3
001A:  BCF    0A.4
001B:  GOTO   278 (RETURN)
.................... } 
....................  
.................... void start_RTC(int h, int min, int sec) 
.................... { 
....................    char time[LCD_LINE_LENGTH]; 
....................  
....................    for (; h < 24; h++) { 
*
0205:  MOVF   39,W
0206:  SUBLW  17
0207:  BTFSS  03.0
0208:  GOTO   241
....................       for (; min < 60; min++) { 
0209:  MOVF   3A,W
020A:  SUBLW  3B
020B:  BTFSS  03.0
020C:  GOTO   23E
....................          for (; sec < 60; sec++) { 
020D:  MOVF   3B,W
020E:  SUBLW  3B
020F:  BTFSS  03.0
0210:  GOTO   23B
....................             sprintf(time, "%02d:%02d:%02d", h, min, sec); 
0211:  CLRF   21
0212:  MOVLW  3C
0213:  MOVWF  20
0214:  MOVF   39,W
0215:  MOVWF  50
0216:  MOVLW  01
0217:  MOVWF  51
0218:  CALL   1AE
0219:  MOVLW  3A
021A:  MOVWF  56
021B:  CALL   1A1
021C:  MOVF   3A,W
021D:  MOVWF  50
021E:  MOVLW  01
021F:  MOVWF  51
0220:  CALL   1AE
0221:  MOVLW  3A
0222:  MOVWF  56
0223:  CALL   1A1
0224:  MOVF   3B,W
0225:  MOVWF  50
0226:  MOVLW  01
0227:  MOVWF  51
0228:  CALL   1AE
....................             lcd_gotoxy(5, 2);      
0229:  MOVLW  05
022A:  MOVWF  54
022B:  MOVLW  02
022C:  MOVWF  55
022D:  CALL   135
....................             lcd_puts(time); 
022E:  CLRF   51
022F:  MOVLW  3C
0230:  MOVWF  50
0231:  CALL   147
....................             delay_ms(1000); 
0232:  MOVLW  04
0233:  MOVWF  50
0234:  MOVLW  FA
0235:  MOVWF  54
0236:  CALL   01C
0237:  DECFSZ 50,F
0238:  GOTO   234
0239:  INCF   3B,F
023A:  GOTO   20D
....................          } 
....................          sec = 0; 
023B:  CLRF   3B
023C:  INCF   3A,F
023D:  GOTO   209
....................       } 
....................       min = 0; 
023E:  CLRF   3A
023F:  INCF   39,F
0240:  GOTO   205
....................    } 
....................    h = 0; 
0241:  CLRF   39
0242:  BCF    0A.3
0243:  BCF    0A.4
0244:  GOTO   290 (RETURN)
.................... } 
....................  
....................  
.................... void main()  
0245:  MOVF   03,W
0246:  ANDLW  1F
0247:  MOVWF  03
0248:  CLRF   21
0249:  CLRF   20
024A:  BSF    03.5
024B:  BSF    1F.0
024C:  BSF    1F.1
024D:  BSF    1F.2
024E:  BCF    1F.3
024F:  MOVLW  07
0250:  MOVWF  1C
0251:  BCF    03.7
.................... { 
....................    char name[LCD_LINE_LENGTH] = "Digital Clock"; 
0252:  MOVLW  44
0253:  BCF    03.5
0254:  MOVWF  22
0255:  MOVLW  69
0256:  MOVWF  23
0257:  MOVLW  67
0258:  MOVWF  24
0259:  MOVLW  69
025A:  MOVWF  25
025B:  MOVLW  74
025C:  MOVWF  26
025D:  MOVLW  61
025E:  MOVWF  27
025F:  MOVLW  6C
0260:  MOVWF  28
0261:  MOVLW  20
0262:  MOVWF  29
0263:  MOVLW  43
0264:  MOVWF  2A
0265:  MOVLW  6C
0266:  MOVWF  2B
0267:  MOVLW  6F
0268:  MOVWF  2C
0269:  MOVLW  63
026A:  MOVWF  2D
026B:  MOVLW  6B
026C:  MOVWF  2E
026D:  CLRF   2F
....................    int h, min, sec; 
....................     
....................    init_RTC(&h, &min, &sec); 
026E:  CLRF   3A
026F:  MOVLW  36
0270:  MOVWF  39
0271:  CLRF   3C
0272:  MOVLW  37
0273:  MOVWF  3B
0274:  CLRF   3E
0275:  MOVLW  38
0276:  MOVWF  3D
0277:  GOTO   004
....................     
....................    lcd_init();  
0278:  GOTO   0EF
....................    delay_ms(500);   
0279:  MOVLW  02
027A:  MOVWF  39
027B:  MOVLW  FA
027C:  MOVWF  54
027D:  CALL   01C
027E:  DECFSZ 39,F
027F:  GOTO   27B
....................    lcd_gotoxy(3, 1);   
0280:  MOVLW  03
0281:  MOVWF  54
0282:  MOVLW  01
0283:  MOVWF  55
0284:  CALL   135
....................    lcd_puts(name); 
0285:  CLRF   51
0286:  MOVLW  22
0287:  MOVWF  50
0288:  CALL   147
....................     
....................    while (TRUE) {     
....................       start_RTC(h, min, sec); 
0289:  MOVF   36,W
028A:  MOVWF  39
028B:  MOVF   37,W
028C:  MOVWF  3A
028D:  MOVF   38,W
028E:  MOVWF  3B
028F:  GOTO   205
0290:  GOTO   289
....................    } 
.................... } 
0291:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
