CCS PCM C Compiler, Version 5.015, 5967               20-Sep-23 21:29

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\UART\MAIN_C\main.lst

               ROM used:   258 words (3%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           21 (6%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0066:  DATA 43,24
0067:  DATA 45,2A
0068:  DATA 4F,2A
0069:  DATA 0D,05
006A:  DATA 00,00
006B:  MOVF   0B,W
006C:  MOVWF  2B
006D:  BCF    0B.7
006E:  BSF    03.5
006F:  BSF    03.6
0070:  BSF    0C.7
0071:  BSF    0C.0
0072:  NOP
0073:  NOP
0074:  BCF    03.5
0075:  BCF    03.6
0076:  BTFSC  2B.7
0077:  BSF    0B.7
0078:  BSF    03.6
0079:  MOVF   0C,W
007A:  ANDLW  7F
007B:  BTFSC  03.2
007C:  GOTO   0C1
007D:  BCF    03.6
007E:  MOVWF  2B
007F:  BSF    03.6
0080:  MOVF   0D,W
0081:  BCF    03.6
0082:  MOVWF  2C
0083:  BSF    03.6
0084:  MOVF   0F,W
0085:  BCF    03.6
0086:  MOVWF  2D
0087:  MOVF   2B,W
0088:  BTFSS  0C.4
0089:  GOTO   088
008A:  MOVWF  19
008B:  MOVF   2C,W
008C:  BSF    03.6
008D:  MOVWF  0D
008E:  BCF    03.6
008F:  MOVF   2D,W
0090:  BSF    03.6
0091:  MOVWF  0F
0092:  BCF    03.6
0093:  MOVF   0B,W
0094:  MOVWF  2E
0095:  BCF    0B.7
0096:  BSF    03.5
0097:  BSF    03.6
0098:  BSF    0C.7
0099:  BSF    0C.0
009A:  NOP
009B:  NOP
009C:  BCF    03.5
009D:  BCF    03.6
009E:  BTFSC  2E.7
009F:  BSF    0B.7
00A0:  BSF    03.6
00A1:  RLF    0C,W
00A2:  RLF    0E,W
00A3:  ANDLW  7F
00A4:  BTFSC  03.2
00A5:  GOTO   0C1
00A6:  BCF    03.6
00A7:  MOVWF  2B
00A8:  BSF    03.6
00A9:  MOVF   0D,W
00AA:  BCF    03.6
00AB:  MOVWF  2C
00AC:  BSF    03.6
00AD:  MOVF   0F,W
00AE:  BCF    03.6
00AF:  MOVWF  2D
00B0:  MOVF   2B,W
00B1:  BTFSS  0C.4
00B2:  GOTO   0B1
00B3:  MOVWF  19
00B4:  MOVF   2C,W
00B5:  BSF    03.6
00B6:  MOVWF  0D
00B7:  BCF    03.6
00B8:  MOVF   2D,W
00B9:  BSF    03.6
00BA:  MOVWF  0F
00BB:  INCF   0D,F
00BC:  BTFSC  03.2
00BD:  INCF   0F,F
00BE:  BCF    03.6
00BF:  GOTO   06B
00C0:  BSF    03.6
00C1:  BCF    03.6
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   0F9 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
00C5:  MOVLW  2C
00C6:  MOVWF  04
00C7:  BCF    03.7
00C8:  MOVF   00,W
00C9:  BTFSC  03.2
00CA:  GOTO   0D8
00CB:  MOVLW  06
00CC:  MOVWF  78
00CD:  CLRF   77
00CE:  DECFSZ 77,F
00CF:  GOTO   0CE
00D0:  DECFSZ 78,F
00D1:  GOTO   0CD
00D2:  MOVLW  7B
00D3:  MOVWF  77
00D4:  DECFSZ 77,F
00D5:  GOTO   0D4
00D6:  DECFSZ 00,F
00D7:  GOTO   0CB
00D8:  BCF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   0FE (RETURN)
....................  
....................  
....................  
.................... #use rs232(UART, baud=9600) 
....................  
.................... #define on 1 
.................... #define off 0 
.................... #define LED(stt) output_bit(PIN_B0, stt)  
....................  
....................  
....................  
....................  
.................... #INT_RDA 
.................... void int_UART()  
*
0051:  BTFSS  0C.5
0052:  GOTO   051
0053:  MOVF   1A,W
0054:  MOVWF  2F
.................... { 
....................    char c = getc(); 
....................    if (c == '1') 
0055:  MOVF   2F,W
0056:  SUBLW  31
0057:  BTFSS  03.2
0058:  GOTO   05E
....................       LED(on); 
0059:  BSF    06.0
005A:  BSF    03.5
005B:  BCF    06.0
005C:  GOTO   061
005D:  BCF    03.5
....................    else 
....................       LED(off); 
005E:  BCF    06.0
005F:  BSF    03.5
0060:  BCF    06.0
0061:  BCF    03.5
0062:  BCF    0C.5
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   02D
.................... } 
....................  
....................  
....................  
.................... void main() 
*
00DB:  MOVF   03,W
00DC:  ANDLW  1F
00DD:  MOVWF  03
00DE:  MOVLW  81
00DF:  BSF    03.5
00E0:  MOVWF  19
00E1:  MOVLW  A6
00E2:  MOVWF  18
00E3:  MOVLW  90
00E4:  BCF    03.5
00E5:  MOVWF  18
00E6:  BSF    03.5
00E7:  BSF    1F.0
00E8:  BSF    1F.1
00E9:  BSF    1F.2
00EA:  BCF    1F.3
00EB:  MOVLW  07
00EC:  MOVWF  1C
00ED:  BCF    03.7
.................... { 
....................    enable_interrupts(INT_RDA);   // interrupt receive data 
00EE:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
00EF:  MOVLW  C0
00F0:  BCF    03.5
00F1:  IORWF  0B,F
....................     
....................    while(TRUE) 
....................    { 
....................       //TODO: User Code 
....................       printf("CHETOT\r\n");   
00F2:  MOVLW  66
00F3:  BSF    03.6
00F4:  MOVWF  0D
00F5:  MOVLW  00
00F6:  MOVWF  0F
00F7:  BCF    03.6
00F8:  GOTO   06B
....................       delay_ms(1000); 
00F9:  MOVLW  04
00FA:  MOVWF  2B
00FB:  MOVLW  FA
00FC:  MOVWF  2C
00FD:  GOTO   0C5
00FE:  DECFSZ 2B,F
00FF:  GOTO   0FB
0100:  GOTO   0F2
....................    } 
.................... } 
0101:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
