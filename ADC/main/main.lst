CCS PCM C Compiler, Version 5.015, 5967               20-Sep-23 20:37

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\read_voltage_DC\main\main.lst

               ROM used:   1301 words (16%)
                           Largest free fragment is 2048
               RAM used:   39 (11%) at main() level
                           61 (17%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   474
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D6,27
0005:  DATA 4C,2A
0006:  DATA A0,1E
0007:  DATA A0,12
0008:  DATA AE,19
0009:  DATA 66,10
000A:  DATA 56,00
*
0124:  MOVLW  8E
0125:  MOVWF  77
0126:  MOVF   3F,W
0127:  MOVWF  78
0128:  MOVF   3E,W
0129:  MOVWF  79
012A:  CLRF   7A
012B:  MOVF   78,F
012C:  BTFSS  03.2
012D:  GOTO   138
012E:  MOVF   79,W
012F:  MOVWF  78
0130:  CLRF   79
0131:  MOVLW  08
0132:  SUBWF  77,F
0133:  MOVF   78,F
0134:  BTFSS  03.2
0135:  GOTO   138
0136:  CLRF   77
0137:  GOTO   140
0138:  BCF    03.0
0139:  BTFSC  78.7
013A:  GOTO   13F
013B:  RLF    79,F
013C:  RLF    78,F
013D:  DECF   77,F
013E:  GOTO   138
013F:  BCF    78.7
0140:  BCF    0A.3
0141:  BCF    0A.4
0142:  GOTO   4B0 (RETURN)
0143:  MOVF   4B,W
0144:  BTFSC  03.2
0145:  GOTO   1B3
0146:  MOVWF  53
0147:  MOVF   4F,W
0148:  BTFSC  03.2
0149:  GOTO   1B3
014A:  ADDWF  53,F
014B:  BTFSC  03.0
014C:  GOTO   154
014D:  MOVLW  7F
014E:  SUBWF  53,F
014F:  BTFSS  03.0
0150:  GOTO   1B3
0151:  BTFSC  03.2
0152:  GOTO   1B3
0153:  GOTO   158
0154:  MOVLW  81
0155:  ADDWF  53,F
0156:  BTFSC  03.0
0157:  GOTO   1B3
0158:  MOVF   53,W
0159:  MOVWF  77
015A:  CLRF   78
015B:  CLRF   79
015C:  CLRF   7A
015D:  MOVF   4C,W
015E:  MOVWF  57
015F:  BSF    57.7
0160:  MOVF   4D,W
0161:  MOVWF  56
0162:  MOVF   4E,W
0163:  MOVWF  55
0164:  MOVLW  18
0165:  MOVWF  53
0166:  CLRF   54
0167:  BTFSS  55.0
0168:  GOTO   181
0169:  MOVF   52,W
016A:  ADDWF  7A,F
016B:  BTFSS  03.0
016C:  GOTO   173
016D:  INCF   79,F
016E:  BTFSS  03.2
016F:  GOTO   173
0170:  INCF   78,F
0171:  BTFSC  03.2
0172:  BSF    54.7
0173:  MOVF   51,W
0174:  ADDWF  79,F
0175:  BTFSS  03.0
0176:  GOTO   17A
0177:  INCF   78,F
0178:  BTFSC  03.2
0179:  BSF    54.7
017A:  MOVF   50,W
017B:  MOVWF  4D
017C:  BSF    4D.7
017D:  MOVF   4D,W
017E:  ADDWF  78,F
017F:  BTFSC  03.0
0180:  BSF    54.7
0181:  RLF    54,F
0182:  RRF    78,F
0183:  RRF    79,F
0184:  RRF    7A,F
0185:  RRF    57,F
0186:  RRF    56,F
0187:  RRF    55,F
0188:  BCF    03.0
0189:  DECFSZ 53,F
018A:  GOTO   166
018B:  MOVLW  01
018C:  ADDWF  77,F
018D:  BTFSC  03.0
018E:  GOTO   1B3
018F:  BTFSC  78.7
0190:  GOTO   198
0191:  RLF    57,F
0192:  RLF    7A,F
0193:  RLF    79,F
0194:  RLF    78,F
0195:  DECF   77,F
0196:  BTFSC  03.2
0197:  GOTO   1B3
0198:  BTFSS  57.7
0199:  GOTO   1A9
019A:  INCF   7A,F
019B:  BTFSS  03.2
019C:  GOTO   1A9
019D:  INCF   79,F
019E:  BTFSS  03.2
019F:  GOTO   1A9
01A0:  INCF   78,F
01A1:  BTFSS  03.2
01A2:  GOTO   1A9
01A3:  RRF    78,F
01A4:  RRF    79,F
01A5:  RRF    7A,F
01A6:  INCF   77,F
01A7:  BTFSC  03.2
01A8:  GOTO   1B3
01A9:  MOVF   4C,W
01AA:  MOVWF  54
01AB:  MOVF   50,W
01AC:  XORWF  54,F
01AD:  BTFSS  54.7
01AE:  GOTO   1B1
01AF:  BSF    78.7
01B0:  GOTO   1B7
01B1:  BCF    78.7
01B2:  GOTO   1B7
01B3:  CLRF   77
01B4:  CLRF   78
01B5:  CLRF   79
01B6:  CLRF   7A
01B7:  RETURN
01B8:  MOVF   42,W
01B9:  BTFSC  03.2
01BA:  GOTO   27D
01BB:  MOVWF  4E
01BC:  MOVF   46,W
01BD:  BTFSC  03.2
01BE:  GOTO   27D
01BF:  SUBWF  4E,F
01C0:  BTFSS  03.0
01C1:  GOTO   1C7
01C2:  MOVLW  7F
01C3:  ADDWF  4E,F
01C4:  BTFSC  03.0
01C5:  GOTO   27D
01C6:  GOTO   1CD
01C7:  MOVLW  81
01C8:  SUBWF  4E,F
01C9:  BTFSS  03.0
01CA:  GOTO   27D
01CB:  BTFSC  03.2
01CC:  GOTO   27D
01CD:  MOVF   4E,W
01CE:  MOVWF  77
01CF:  CLRF   78
01D0:  CLRF   79
01D1:  CLRF   7A
01D2:  CLRF   4D
01D3:  MOVF   43,W
01D4:  MOVWF  4C
01D5:  BSF    4C.7
01D6:  MOVF   44,W
01D7:  MOVWF  4B
01D8:  MOVF   45,W
01D9:  MOVWF  4A
01DA:  MOVLW  19
01DB:  MOVWF  4E
01DC:  MOVF   49,W
01DD:  SUBWF  4A,F
01DE:  BTFSC  03.0
01DF:  GOTO   1F0
01E0:  MOVLW  01
01E1:  SUBWF  4B,F
01E2:  BTFSC  03.0
01E3:  GOTO   1F0
01E4:  SUBWF  4C,F
01E5:  BTFSC  03.0
01E6:  GOTO   1F0
01E7:  SUBWF  4D,F
01E8:  BTFSC  03.0
01E9:  GOTO   1F0
01EA:  INCF   4D,F
01EB:  INCF   4C,F
01EC:  INCF   4B,F
01ED:  MOVF   49,W
01EE:  ADDWF  4A,F
01EF:  GOTO   222
01F0:  MOVF   48,W
01F1:  SUBWF  4B,F
01F2:  BTFSC  03.0
01F3:  GOTO   20B
01F4:  MOVLW  01
01F5:  SUBWF  4C,F
01F6:  BTFSC  03.0
01F7:  GOTO   20B
01F8:  SUBWF  4D,F
01F9:  BTFSC  03.0
01FA:  GOTO   20B
01FB:  INCF   4D,F
01FC:  INCF   4C,F
01FD:  MOVF   48,W
01FE:  ADDWF  4B,F
01FF:  MOVF   49,W
0200:  ADDWF  4A,F
0201:  BTFSS  03.0
0202:  GOTO   222
0203:  INCF   4B,F
0204:  BTFSS  03.2
0205:  GOTO   222
0206:  INCF   4C,F
0207:  BTFSS  03.2
0208:  GOTO   222
0209:  INCF   4D,F
020A:  GOTO   222
020B:  MOVF   47,W
020C:  IORLW  80
020D:  SUBWF  4C,F
020E:  BTFSC  03.0
020F:  GOTO   221
0210:  MOVLW  01
0211:  SUBWF  4D,F
0212:  BTFSC  03.0
0213:  GOTO   221
0214:  INCF   4D,F
0215:  MOVF   47,W
0216:  IORLW  80
0217:  ADDWF  4C,F
0218:  MOVF   48,W
0219:  ADDWF  4B,F
021A:  BTFSS  03.0
021B:  GOTO   1FF
021C:  INCF   4C,F
021D:  BTFSS  03.2
021E:  GOTO   1FF
021F:  INCF   4D,F
0220:  GOTO   1FF
0221:  BSF    7A.0
0222:  DECFSZ 4E,F
0223:  GOTO   225
0224:  GOTO   230
0225:  BCF    03.0
0226:  RLF    4A,F
0227:  RLF    4B,F
0228:  RLF    4C,F
0229:  RLF    4D,F
022A:  BCF    03.0
022B:  RLF    7A,F
022C:  RLF    79,F
022D:  RLF    78,F
022E:  RLF    4F,F
022F:  GOTO   1DC
0230:  BTFSS  4F.0
0231:  GOTO   238
0232:  BCF    03.0
0233:  RRF    78,F
0234:  RRF    79,F
0235:  RRF    7A,F
0236:  RRF    4F,F
0237:  GOTO   23B
0238:  DECF   77,F
0239:  BTFSC  03.2
023A:  GOTO   27D
023B:  BTFSC  4F.7
023C:  GOTO   264
023D:  BCF    03.0
023E:  RLF    4A,F
023F:  RLF    4B,F
0240:  RLF    4C,F
0241:  RLF    4D,F
0242:  MOVF   49,W
0243:  SUBWF  4A,F
0244:  BTFSC  03.0
0245:  GOTO   250
0246:  MOVLW  01
0247:  SUBWF  4B,F
0248:  BTFSC  03.0
0249:  GOTO   250
024A:  SUBWF  4C,F
024B:  BTFSC  03.0
024C:  GOTO   250
024D:  SUBWF  4D,F
024E:  BTFSS  03.0
024F:  GOTO   273
0250:  MOVF   48,W
0251:  SUBWF  4B,F
0252:  BTFSC  03.0
0253:  GOTO   25B
0254:  MOVLW  01
0255:  SUBWF  4C,F
0256:  BTFSC  03.0
0257:  GOTO   25B
0258:  SUBWF  4D,F
0259:  BTFSS  03.0
025A:  GOTO   273
025B:  MOVF   47,W
025C:  IORLW  80
025D:  SUBWF  4C,F
025E:  BTFSC  03.0
025F:  GOTO   264
0260:  MOVLW  01
0261:  SUBWF  4D,F
0262:  BTFSS  03.0
0263:  GOTO   273
0264:  INCF   7A,F
0265:  BTFSS  03.2
0266:  GOTO   273
0267:  INCF   79,F
0268:  BTFSS  03.2
0269:  GOTO   273
026A:  INCF   78,F
026B:  BTFSS  03.2
026C:  GOTO   273
026D:  INCF   77,F
026E:  BTFSC  03.2
026F:  GOTO   27D
0270:  RRF    78,F
0271:  RRF    79,F
0272:  RRF    7A,F
0273:  MOVF   43,W
0274:  MOVWF  4E
0275:  MOVF   47,W
0276:  XORWF  4E,F
0277:  BTFSS  4E.7
0278:  GOTO   27B
0279:  BSF    78.7
027A:  GOTO   281
027B:  BCF    78.7
027C:  GOTO   281
027D:  CLRF   77
027E:  CLRF   78
027F:  CLRF   79
0280:  CLRF   7A
0281:  BCF    0A.3
0282:  BCF    0A.4
0283:  GOTO   4DF (RETURN)
0284:  MOVF   20,W
0285:  MOVWF  04
0286:  BCF    03.7
0287:  BTFSC  21.0
0288:  BSF    03.7
0289:  MOVF   4B,W
028A:  MOVWF  00
028B:  INCF   04,F
028C:  CLRF   00
028D:  INCF   20,F
028E:  BTFSC  03.2
028F:  INCF   21,F
0290:  RETURN
0291:  MOVF   0B,W
0292:  MOVWF  3F
0293:  BCF    0B.7
0294:  BSF    03.5
0295:  BSF    03.6
0296:  BSF    0C.7
0297:  BSF    0C.0
0298:  NOP
0299:  NOP
029A:  BCF    03.5
029B:  BCF    03.6
029C:  BTFSC  3F.7
029D:  BSF    0B.7
029E:  BTFSC  03.0
029F:  GOTO   2C8
02A0:  BSF    03.6
02A1:  MOVF   0C,W
02A2:  ANDLW  7F
02A3:  BCF    03.6
02A4:  MOVWF  3F
02A5:  BSF    03.6
02A6:  MOVF   0D,W
02A7:  BCF    03.6
02A8:  MOVWF  40
02A9:  BSF    03.6
02AA:  MOVF   0F,W
02AB:  BCF    03.6
02AC:  MOVWF  41
02AD:  MOVF   3F,W
02AE:  MOVWF  4B
02AF:  CALL   284
02B0:  MOVF   40,W
02B1:  BSF    03.6
02B2:  MOVWF  0D
02B3:  BCF    03.6
02B4:  MOVF   41,W
02B5:  BSF    03.6
02B6:  MOVWF  0F
02B7:  BCF    03.6
02B8:  MOVF   0B,W
02B9:  MOVWF  42
02BA:  BCF    0B.7
02BB:  BSF    03.5
02BC:  BSF    03.6
02BD:  BSF    0C.7
02BE:  BSF    0C.0
02BF:  NOP
02C0:  NOP
02C1:  BCF    03.5
02C2:  BCF    03.6
02C3:  BTFSC  42.7
02C4:  BSF    0B.7
02C5:  DECFSZ 3E,F
02C6:  GOTO   2C8
02C7:  GOTO   2E7
02C8:  BSF    03.6
02C9:  RLF    0C,W
02CA:  RLF    0E,W
02CB:  ANDLW  7F
02CC:  BCF    03.6
02CD:  MOVWF  3F
02CE:  BSF    03.6
02CF:  MOVF   0D,W
02D0:  BCF    03.6
02D1:  MOVWF  40
02D2:  BSF    03.6
02D3:  MOVF   0F,W
02D4:  BCF    03.6
02D5:  MOVWF  41
02D6:  MOVF   3F,W
02D7:  MOVWF  4B
02D8:  CALL   284
02D9:  MOVF   40,W
02DA:  BSF    03.6
02DB:  MOVWF  0D
02DC:  BCF    03.6
02DD:  MOVF   41,W
02DE:  BSF    03.6
02DF:  MOVWF  0F
02E0:  INCF   0D,F
02E1:  BTFSC  03.2
02E2:  INCF   0F,F
02E3:  BCF    03.0
02E4:  BCF    03.6
02E5:  DECFSZ 3E,F
02E6:  GOTO   291
02E7:  BCF    0A.3
02E8:  BCF    0A.4
02E9:  GOTO   4F4 (RETURN)
02EA:  BTFSC  03.1
02EB:  GOTO   2EF
02EC:  MOVLW  53
02ED:  MOVWF  04
02EE:  BCF    03.7
02EF:  CLRF   77
02F0:  CLRF   78
02F1:  CLRF   79
02F2:  CLRF   7A
02F3:  CLRF   53
02F4:  CLRF   54
02F5:  CLRF   55
02F6:  CLRF   56
02F7:  MOVF   52,W
02F8:  IORWF  51,W
02F9:  IORWF  50,W
02FA:  IORWF  4F,W
02FB:  BTFSC  03.2
02FC:  GOTO   32D
02FD:  MOVLW  20
02FE:  MOVWF  57
02FF:  BCF    03.0
0300:  RLF    4B,F
0301:  RLF    4C,F
0302:  RLF    4D,F
0303:  RLF    4E,F
0304:  RLF    53,F
0305:  RLF    54,F
0306:  RLF    55,F
0307:  RLF    56,F
0308:  MOVF   52,W
0309:  SUBWF  56,W
030A:  BTFSS  03.2
030B:  GOTO   316
030C:  MOVF   51,W
030D:  SUBWF  55,W
030E:  BTFSS  03.2
030F:  GOTO   316
0310:  MOVF   50,W
0311:  SUBWF  54,W
0312:  BTFSS  03.2
0313:  GOTO   316
0314:  MOVF   4F,W
0315:  SUBWF  53,W
0316:  BTFSS  03.0
0317:  GOTO   327
0318:  MOVF   4F,W
0319:  SUBWF  53,F
031A:  MOVF   50,W
031B:  BTFSS  03.0
031C:  INCFSZ 50,W
031D:  SUBWF  54,F
031E:  MOVF   51,W
031F:  BTFSS  03.0
0320:  INCFSZ 51,W
0321:  SUBWF  55,F
0322:  MOVF   52,W
0323:  BTFSS  03.0
0324:  INCFSZ 52,W
0325:  SUBWF  56,F
0326:  BSF    03.0
0327:  RLF    77,F
0328:  RLF    78,F
0329:  RLF    79,F
032A:  RLF    7A,F
032B:  DECFSZ 57,F
032C:  GOTO   2FF
032D:  MOVF   53,W
032E:  MOVWF  00
032F:  INCF   04,F
0330:  MOVF   54,W
0331:  MOVWF  00
0332:  INCF   04,F
0333:  MOVF   55,W
0334:  MOVWF  00
0335:  INCF   04,F
0336:  MOVF   56,W
0337:  MOVWF  00
0338:  RETURN
0339:  MOVF   04,W
033A:  MOVWF  43
033B:  MOVF   42,W
033C:  MOVWF  45
033D:  BTFSC  03.2
033E:  GOTO   358
033F:  MOVF   41,W
0340:  MOVWF  4E
0341:  MOVF   40,W
0342:  MOVWF  4D
0343:  MOVF   3F,W
0344:  MOVWF  4C
0345:  MOVF   3E,W
0346:  MOVWF  4B
0347:  CLRF   52
0348:  CLRF   51
0349:  MOVLW  20
034A:  MOVWF  50
034B:  MOVLW  82
034C:  MOVWF  4F
034D:  CALL   143
034E:  MOVF   7A,W
034F:  MOVWF  41
0350:  MOVF   79,W
0351:  MOVWF  40
0352:  MOVF   78,W
0353:  MOVWF  3F
0354:  MOVF   77,W
0355:  MOVWF  3E
0356:  DECFSZ 45,F
0357:  GOTO   33F
0358:  MOVF   41,W
0359:  MOVWF  4E
035A:  MOVF   40,W
035B:  MOVWF  4D
035C:  MOVF   3F,W
035D:  MOVWF  4C
035E:  MOVF   3E,W
035F:  MOVWF  4B
0360:  MOVF   4B,W
0361:  SUBLW  B6
0362:  MOVWF  4B
0363:  CLRF   7A
0364:  MOVF   4C,W
0365:  MOVWF  4F
0366:  BSF    4C.7
0367:  BCF    03.0
0368:  RRF    4C,F
0369:  RRF    4D,F
036A:  RRF    4E,F
036B:  RRF    7A,F
036C:  RRF    79,F
036D:  RRF    78,F
036E:  RRF    77,F
036F:  DECFSZ 4B,F
0370:  GOTO   367
0371:  BTFSS  4F.7
0372:  GOTO   37E
0373:  COMF   77,F
0374:  COMF   78,F
0375:  COMF   79,F
0376:  COMF   7A,F
0377:  INCF   77,F
0378:  BTFSC  03.2
0379:  INCF   78,F
037A:  BTFSC  03.2
037B:  INCF   79,F
037C:  BTFSC  03.2
037D:  INCF   7A,F
037E:  MOVF   7A,W
037F:  MOVWF  41
0380:  MOVF   79,W
0381:  MOVWF  40
0382:  MOVF   78,W
0383:  MOVWF  3F
0384:  MOVF   77,W
0385:  MOVWF  3E
0386:  BTFSS  41.7
0387:  GOTO   395
0388:  DECF   43,F
0389:  BSF    43.5
038A:  COMF   3E,F
038B:  COMF   3F,F
038C:  COMF   40,F
038D:  COMF   41,F
038E:  INCF   3E,F
038F:  BTFSC  03.2
0390:  INCF   3F,F
0391:  BTFSC  03.2
0392:  INCF   40,F
0393:  BTFSC  03.2
0394:  INCF   41,F
0395:  MOVLW  3B
0396:  MOVWF  4A
0397:  MOVLW  9A
0398:  MOVWF  49
0399:  MOVLW  CA
039A:  MOVWF  48
039B:  CLRF   47
039C:  MOVLW  0A
039D:  MOVWF  45
039E:  MOVF   42,W
039F:  BTFSC  03.2
03A0:  INCF   43,F
03A1:  BSF    03.1
03A2:  MOVLW  3E
03A3:  MOVWF  04
03A4:  BCF    03.7
03A5:  MOVF   41,W
03A6:  MOVWF  4E
03A7:  MOVF   40,W
03A8:  MOVWF  4D
03A9:  MOVF   3F,W
03AA:  MOVWF  4C
03AB:  MOVF   3E,W
03AC:  MOVWF  4B
03AD:  MOVF   4A,W
03AE:  MOVWF  52
03AF:  MOVF   49,W
03B0:  MOVWF  51
03B1:  MOVF   48,W
03B2:  MOVWF  50
03B3:  MOVF   47,W
03B4:  MOVWF  4F
03B5:  CALL   2EA
03B6:  MOVF   78,W
03B7:  MOVF   77,F
03B8:  BTFSS  03.2
03B9:  GOTO   3CD
03BA:  INCF   42,W
03BB:  SUBWF  45,W
03BC:  BTFSC  03.2
03BD:  GOTO   3CD
03BE:  MOVF   43,W
03BF:  BTFSC  03.2
03C0:  GOTO   3CF
03C1:  ANDLW  0F
03C2:  SUBWF  45,W
03C3:  BTFSC  03.2
03C4:  GOTO   3C7
03C5:  BTFSC  03.0
03C6:  GOTO   3FF
03C7:  BTFSC  43.7
03C8:  GOTO   3FF
03C9:  BTFSC  43.6
03CA:  GOTO   3CF
03CB:  MOVLW  20
03CC:  GOTO   3FB
03CD:  MOVLW  20
03CE:  ANDWF  43,F
03CF:  BTFSS  43.5
03D0:  GOTO   3DD
03D1:  BCF    43.5
03D2:  MOVF   42,W
03D3:  BTFSS  03.2
03D4:  DECF   43,F
03D5:  MOVF   77,W
03D6:  MOVWF  43
03D7:  MOVLW  2D
03D8:  MOVWF  4B
03D9:  CALL   284
03DA:  MOVF   43,W
03DB:  MOVWF  77
03DC:  CLRF   43
03DD:  MOVF   42,W
03DE:  SUBWF  45,W
03DF:  BTFSS  03.2
03E0:  GOTO   3EB
03E1:  MOVF   77,W
03E2:  MOVWF  43
03E3:  MOVLW  2E
03E4:  MOVWF  4B
03E5:  CALL   284
03E6:  MOVF   43,W
03E7:  MOVWF  77
03E8:  MOVLW  20
03E9:  ANDWF  43,F
03EA:  MOVLW  00
03EB:  MOVLW  30
03EC:  BTFSS  43.5
03ED:  GOTO   3FB
03EE:  BCF    43.5
03EF:  MOVF   42,W
03F0:  BTFSS  03.2
03F1:  DECF   43,F
03F2:  MOVF   77,W
03F3:  MOVWF  43
03F4:  MOVLW  2D
03F5:  MOVWF  4B
03F6:  CALL   284
03F7:  MOVF   43,W
03F8:  MOVWF  77
03F9:  CLRF   43
03FA:  MOVLW  30
03FB:  ADDWF  77,F
03FC:  MOVF   77,W
03FD:  MOVWF  4B
03FE:  CALL   284
03FF:  BCF    03.1
0400:  MOVF   4A,W
0401:  MOVWF  4E
0402:  MOVF   49,W
0403:  MOVWF  4D
0404:  MOVF   48,W
0405:  MOVWF  4C
0406:  MOVF   47,W
0407:  MOVWF  4B
0408:  CLRF   52
0409:  CLRF   51
040A:  CLRF   50
040B:  MOVLW  0A
040C:  MOVWF  4F
040D:  CALL   2EA
040E:  MOVF   7A,W
040F:  MOVWF  4A
0410:  MOVF   79,W
0411:  MOVWF  49
0412:  MOVF   78,W
0413:  MOVWF  48
0414:  MOVF   77,W
0415:  MOVWF  47
0416:  DECFSZ 45,F
0417:  GOTO   3A1
0418:  BCF    0A.3
0419:  BCF    0A.4
041A:  GOTO   501 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10  
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
000B:  MOVLW  43
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01E
0011:  MOVLW  06
0012:  MOVWF  78
0013:  CLRF   77
0014:  DECFSZ 77,F
0015:  GOTO   014
0016:  DECFSZ 78,F
0017:  GOTO   013
0018:  MOVLW  7B
0019:  MOVWF  77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 00,F
001D:  GOTO   011
001E:  RETURN
....................  
....................  
....................  
.................... #define LCD_RS_PIN      PIN_D1 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... #define NULL 0 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0088:  BSF    08.4
....................    output_float(LCD_DATA5); 
0089:  BSF    08.5
....................    output_float(LCD_DATA6); 
008A:  BSF    08.6
....................    output_float(LCD_DATA7); 
008B:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
008C:  BCF    03.5
008D:  BSF    08.2
008E:  BSF    03.5
008F:  BCF    08.2
....................    delay_cycles(1); 
0090:  NOP
....................    lcd_output_enable(1); 
0091:  BCF    03.5
0092:  BSF    08.3
0093:  BSF    03.5
0094:  BCF    08.3
....................    delay_cycles(1); 
0095:  NOP
....................    high = lcd_read_nibble(); 
0096:  BCF    03.5
0097:  CALL   04F
0098:  MOVF   78,W
0099:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
009A:  BCF    08.3
009B:  BSF    03.5
009C:  BCF    08.3
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    08.3
00A0:  BSF    03.5
00A1:  BCF    08.3
....................    delay_us(1); 
00A2:  GOTO   0A3
00A3:  GOTO   0A4
00A4:  NOP
....................    low = lcd_read_nibble(); 
00A5:  BCF    03.5
00A6:  CALL   04F
00A7:  MOVF   78,W
00A8:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
00A9:  BCF    08.3
00AA:  BSF    03.5
00AB:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00AC:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00AD:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00AE:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00AF:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B0:  BCF    03.5
00B1:  SWAPF  49,W
00B2:  MOVWF  77
00B3:  MOVLW  F0
00B4:  ANDWF  77,F
00B5:  MOVF   77,W
00B6:  IORWF  48,W
00B7:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
004F:  CLRF   4A
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0050:  BSF    03.5
0051:  BSF    08.4
0052:  MOVLW  00
0053:  BCF    03.5
0054:  BTFSC  08.4
0055:  MOVLW  01
0056:  IORWF  4A,F
....................    n |= input(LCD_DATA5) << 1; 
0057:  BSF    03.5
0058:  BSF    08.5
0059:  MOVLW  00
005A:  BCF    03.5
005B:  BTFSC  08.5
005C:  MOVLW  01
005D:  MOVWF  77
005E:  BCF    03.0
005F:  RLF    77,F
0060:  MOVF   77,W
0061:  IORWF  4A,F
....................    n |= input(LCD_DATA6) << 2; 
0062:  BSF    03.5
0063:  BSF    08.6
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  08.6
0067:  MOVLW  01
0068:  MOVWF  77
0069:  RLF    77,F
006A:  RLF    77,F
006B:  MOVLW  FC
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  4A,F
....................    n |= input(LCD_DATA7) << 3; 
006F:  BSF    03.5
0070:  BSF    08.7
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.7
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  RLF    77,F
0079:  MOVLW  F8
007A:  ANDWF  77,F
007B:  MOVF   77,W
007C:  IORWF  4A,F
....................     
....................    return(n); 
007D:  MOVF   4A,W
007E:  MOVWF  78
....................   #else 
007F:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
001F:  BTFSC  49.0
0020:  GOTO   023
0021:  BCF    08.4
0022:  GOTO   024
0023:  BSF    08.4
0024:  BSF    03.5
0025:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0026:  BCF    03.5
0027:  BTFSC  49.1
0028:  GOTO   02B
0029:  BCF    08.5
002A:  GOTO   02C
002B:  BSF    08.5
002C:  BSF    03.5
002D:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
002E:  BCF    03.5
002F:  BTFSC  49.2
0030:  GOTO   033
0031:  BCF    08.6
0032:  GOTO   034
0033:  BSF    08.6
0034:  BSF    03.5
0035:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0036:  BCF    03.5
0037:  BTFSC  49.3
0038:  GOTO   03B
0039:  BCF    08.7
003A:  GOTO   03C
003B:  BSF    08.7
003C:  BSF    03.5
003D:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
003E:  NOP
....................    lcd_output_enable(1); 
003F:  BCF    03.5
0040:  BSF    08.3
0041:  BSF    03.5
0042:  BCF    08.3
....................    delay_us(2); 
0043:  MOVLW  02
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  GOTO   048
0048:  NOP
....................    lcd_output_enable(0); 
0049:  BCF    03.5
004A:  BCF    08.3
004B:  BSF    03.5
004C:  BCF    08.3
004D:  BCF    03.5
004E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0080:  BSF    03.5
0081:  BCF    08.3
....................    lcd_rs_tris(); 
0082:  BCF    08.1
....................    lcd_rw_tris(); 
0083:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0084:  BCF    03.5
0085:  BCF    08.1
0086:  BSF    03.5
0087:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B8:  MOVF   78,W
00B9:  MOVWF  48
00BA:  BTFSS  48.7
00BB:  GOTO   0BE
00BC:  BSF    03.5
00BD:  GOTO   088
....................    lcd_output_rs(address); 
00BE:  MOVF   46,F
00BF:  BTFSS  03.2
00C0:  GOTO   0C3
00C1:  BCF    08.1
00C2:  GOTO   0C4
00C3:  BSF    08.1
00C4:  BSF    03.5
00C5:  BCF    08.1
....................    delay_cycles(1); 
00C6:  NOP
....................    lcd_output_rw(0); 
00C7:  BCF    03.5
00C8:  BCF    08.2
00C9:  BSF    03.5
00CA:  BCF    08.2
....................    delay_cycles(1); 
00CB:  NOP
....................    lcd_output_enable(0); 
00CC:  BCF    03.5
00CD:  BCF    08.3
00CE:  BSF    03.5
00CF:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00D0:  BCF    03.5
00D1:  SWAPF  47,W
00D2:  MOVWF  48
00D3:  MOVLW  0F
00D4:  ANDWF  48,F
00D5:  MOVF   48,W
00D6:  MOVWF  49
00D7:  CALL   01F
....................    lcd_send_nibble(n & 0xf); 
00D8:  MOVF   47,W
00D9:  ANDLW  0F
00DA:  MOVWF  48
00DB:  MOVWF  49
00DC:  CALL   01F
00DD:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00DE:  MOVLW  28
00DF:  MOVWF  3F
00E0:  MOVLW  0C
00E1:  MOVWF  40
00E2:  MOVLW  01
00E3:  MOVWF  41
00E4:  MOVLW  06
00E5:  MOVWF  42
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00E6:  BCF    08.3
00E7:  BSF    03.5
00E8:  BCF    08.3
....................    lcd_output_rs(0); 
00E9:  BCF    03.5
00EA:  BCF    08.1
00EB:  BSF    03.5
00EC:  BCF    08.1
....................    lcd_output_rw(0); 
00ED:  BCF    03.5
00EE:  BCF    08.2
00EF:  BSF    03.5
00F0:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F1:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F2:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F3:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F4:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F5:  BCF    08.3
....................    lcd_rs_tris(); 
00F6:  BCF    08.1
....................    lcd_rw_tris(); 
00F7:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00F8:  MOVLW  0F
00F9:  BCF    03.5
00FA:  MOVWF  43
00FB:  CALL   00B
....................    for(i=1;i<=3;++i) 
00FC:  MOVLW  01
00FD:  MOVWF  3E
00FE:  MOVF   3E,W
00FF:  SUBLW  03
0100:  BTFSS  03.0
0101:  GOTO   10A
....................    { 
....................        lcd_send_nibble(3); 
0102:  MOVLW  03
0103:  MOVWF  49
0104:  CALL   01F
....................        delay_ms(5); 
0105:  MOVLW  05
0106:  MOVWF  43
0107:  CALL   00B
0108:  INCF   3E,F
0109:  GOTO   0FE
....................    } 
....................     
....................    lcd_send_nibble(2); 
010A:  MOVLW  02
010B:  MOVWF  49
010C:  CALL   01F
....................    delay_ms(5); 
010D:  MOVLW  05
010E:  MOVWF  43
010F:  CALL   00B
....................    for(i=0;i<=3;++i) 
0110:  CLRF   3E
0111:  MOVF   3E,W
0112:  SUBLW  03
0113:  BTFSS  03.0
0114:  GOTO   121
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0115:  MOVLW  3F
0116:  ADDWF  3E,W
0117:  MOVWF  04
0118:  BCF    03.7
0119:  MOVF   00,W
011A:  MOVWF  43
011B:  CLRF   46
011C:  MOVF   43,W
011D:  MOVWF  47
011E:  CALL   080
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011F:  INCF   3E,F
0120:  GOTO   111
0121:  BCF    0A.3
0122:  BCF    0A.4
0123:  GOTO   483 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
041B:  DECFSZ 43,W
041C:  GOTO   41E
041D:  GOTO   421
....................       address=LCD_LINE_TWO; 
041E:  MOVLW  40
041F:  MOVWF  44
0420:  GOTO   422
....................    else 
....................       address=0; 
0421:  CLRF   44
....................       
....................    address+=x-1; 
0422:  MOVLW  01
0423:  SUBWF  42,W
0424:  ADDWF  44,F
....................    lcd_send_byte(0,0x80|address); 
0425:  MOVF   44,W
0426:  IORLW  80
0427:  MOVWF  45
0428:  CLRF   46
0429:  MOVF   45,W
042A:  MOVWF  47
042B:  CALL   080
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
042C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0442:  MOVF   41,W
0443:  XORLW  07
0444:  BTFSC  03.2
0445:  GOTO   450
0446:  XORLW  0B
0447:  BTFSC  03.2
0448:  GOTO   455
0449:  XORLW  06
044A:  BTFSC  03.2
044B:  GOTO   45D
044C:  XORLW  02
044D:  BTFSC  03.2
044E:  GOTO   463
044F:  GOTO   468
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0450:  MOVLW  01
0451:  MOVWF  42
0452:  MOVWF  43
0453:  CALL   41B
0454:  GOTO   46D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0455:  CLRF   46
0456:  MOVLW  01
0457:  MOVWF  47
0458:  CALL   080
....................                      delay_ms(2); 
0459:  MOVLW  02
045A:  MOVWF  43
045B:  CALL   00B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
045C:  GOTO   46D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
045D:  MOVLW  01
045E:  MOVWF  42
045F:  MOVLW  02
0460:  MOVWF  43
0461:  CALL   41B
0462:  GOTO   46D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0463:  CLRF   46
0464:  MOVLW  10
0465:  MOVWF  47
0466:  CALL   080
0467:  GOTO   46D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0468:  MOVLW  01
0469:  MOVWF  46
046A:  MOVF   41,W
046B:  MOVWF  47
046C:  CALL   080
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_byte(0,0x01); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_puts(char *str) 
.................... { 
....................    while(*str!=NULL) 
*
042D:  MOVF   3F,W
042E:  MOVWF  7A
042F:  MOVF   3E,W
0430:  MOVWF  04
0431:  BCF    03.7
0432:  BTFSC  7A.0
0433:  BSF    03.7
0434:  MOVF   00,F
0435:  BTFSC  03.2
0436:  GOTO   471
....................    { 
....................       lcd_putc(*str); 
0437:  MOVF   3F,W
0438:  MOVWF  7A
0439:  MOVF   3E,W
043A:  MOVWF  04
043B:  BCF    03.7
043C:  BTFSC  7A.0
043D:  BSF    03.7
043E:  MOVF   00,W
043F:  MOVWF  40
0440:  MOVF   40,W
0441:  MOVWF  41
....................       str++; 
*
046D:  INCF   3E,F
046E:  BTFSC  03.2
046F:  INCF   3F,F
0470:  GOTO   42D
....................    } 
0471:  BCF    0A.3
0472:  BCF    0A.4
0473:  GOTO   510 (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define channel 5 
....................  
....................  
.................... void main() { 
0474:  MOVF   03,W
0475:  ANDLW  1F
0476:  MOVWF  03
0477:  CLRF   21
0478:  CLRF   20
0479:  BSF    03.5
047A:  BSF    1F.0
047B:  BSF    1F.1
047C:  BSF    1F.2
047D:  BCF    1F.3
047E:  MOVLW  07
047F:  MOVWF  1C
0480:  BCF    03.7
....................    float adc, volt;   
....................    char string[LCD_LINE_LENGTH]; 
....................     
....................    lcd_init(); 
0481:  BCF    03.5
0482:  GOTO   0DE
....................    delay_ms(500); 
0483:  MOVLW  02
0484:  MOVWF  3E
0485:  MOVLW  FA
0486:  MOVWF  43
0487:  CALL   00B
0488:  DECFSZ 3E,F
0489:  GOTO   485
....................    
....................    setup_adc(ADC_CLOCK_INTERNAL); 
048A:  BSF    03.5
048B:  BCF    1F.6
048C:  BCF    03.5
048D:  BSF    1F.6
048E:  BSF    1F.7
048F:  BSF    03.5
0490:  BSF    1F.7
0491:  BCF    03.5
0492:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG);     // Sets up the ADC pins to be analog 
0493:  BSF    03.5
0494:  BCF    1F.0
0495:  BCF    1F.1
0496:  BCF    1F.2
0497:  BCF    1F.3
....................    set_adc_channel(channel);        // config AN5 
0498:  MOVLW  28
0499:  MOVWF  78
049A:  BCF    03.5
049B:  MOVF   1F,W
049C:  ANDLW  C7
049D:  IORWF  78,W
049E:  MOVWF  1F
....................    delay_us(10); 
049F:  MOVLW  10
04A0:  MOVWF  77
04A1:  DECFSZ 77,F
04A2:  GOTO   4A1
04A3:  NOP
....................     
....................    while (TRUE) { 
....................       adc = read_adc(); 
04A4:  BSF    1F.2
04A5:  BTFSC  1F.2
04A6:  GOTO   4A5
04A7:  MOVF   1E,W
04A8:  MOVWF  7A
04A9:  BSF    03.5
04AA:  MOVF   1E,W
04AB:  BCF    03.5
04AC:  MOVWF  3E
04AD:  MOVF   1E,W
04AE:  MOVWF  3F
04AF:  GOTO   124
04B0:  MOVF   7A,W
04B1:  MOVWF  25
04B2:  MOVF   79,W
04B3:  MOVWF  24
04B4:  MOVF   78,W
04B5:  MOVWF  23
04B6:  MOVF   77,W
04B7:  MOVWF  22
....................       volt = 5 * adc / 1023;        // 5V - 1023adc 
04B8:  CLRF   4E
04B9:  CLRF   4D
04BA:  MOVLW  20
04BB:  MOVWF  4C
04BC:  MOVLW  81
04BD:  MOVWF  4B
04BE:  MOVF   25,W
04BF:  MOVWF  52
04C0:  MOVF   24,W
04C1:  MOVWF  51
04C2:  MOVF   23,W
04C3:  MOVWF  50
04C4:  MOVF   22,W
04C5:  MOVWF  4F
04C6:  CALL   143
04C7:  MOVF   7A,W
04C8:  MOVWF  41
04C9:  MOVF   79,W
04CA:  MOVWF  40
04CB:  MOVF   78,W
04CC:  MOVWF  3F
04CD:  MOVF   77,W
04CE:  MOVWF  3E
04CF:  MOVF   7A,W
04D0:  MOVWF  45
04D1:  MOVF   79,W
04D2:  MOVWF  44
04D3:  MOVF   78,W
04D4:  MOVWF  43
04D5:  MOVF   77,W
04D6:  MOVWF  42
04D7:  CLRF   49
04D8:  MOVLW  C0
04D9:  MOVWF  48
04DA:  MOVLW  7F
04DB:  MOVWF  47
04DC:  MOVLW  88
04DD:  MOVWF  46
04DE:  GOTO   1B8
04DF:  MOVF   7A,W
04E0:  MOVWF  29
04E1:  MOVF   79,W
04E2:  MOVWF  28
04E3:  MOVF   78,W
04E4:  MOVWF  27
04E5:  MOVF   77,W
04E6:  MOVWF  26
....................       sprintf(string, "VOLT = %.3f V", volt); 
04E7:  CLRF   21
04E8:  MOVLW  2A
04E9:  MOVWF  20
04EA:  MOVLW  04
04EB:  BSF    03.6
04EC:  MOVWF  0D
04ED:  MOVLW  00
04EE:  MOVWF  0F
04EF:  BCF    03.0
04F0:  MOVLW  07
04F1:  BCF    03.6
04F2:  MOVWF  3E
04F3:  GOTO   291
04F4:  MOVLW  89
04F5:  MOVWF  04
04F6:  MOVF   29,W
04F7:  MOVWF  41
04F8:  MOVF   28,W
04F9:  MOVWF  40
04FA:  MOVF   27,W
04FB:  MOVWF  3F
04FC:  MOVF   26,W
04FD:  MOVWF  3E
04FE:  MOVLW  03
04FF:  MOVWF  42
0500:  GOTO   339
0501:  MOVLW  20
0502:  MOVWF  4B
0503:  CALL   284
0504:  MOVLW  56
0505:  MOVWF  4B
0506:  CALL   284
....................        
....................       lcd_gotoxy(2, 1);                         
0507:  MOVLW  02
0508:  MOVWF  42
0509:  MOVLW  01
050A:  MOVWF  43
050B:  CALL   41B
....................       lcd_puts(string); 
050C:  CLRF   3F
050D:  MOVLW  2A
050E:  MOVWF  3E
050F:  GOTO   42D
....................        
....................       delay_ms(100); 
0510:  MOVLW  64
0511:  MOVWF  43
0512:  CALL   00B
0513:  GOTO   4A4
....................    }  
.................... } 
0514:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
