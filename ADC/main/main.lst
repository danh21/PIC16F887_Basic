CCS PCM C Compiler, Version 5.015, 5967               17-Sep-23 16:36

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\read_ADC\main.lst

               ROM used:   703 words (9%)
                           Largest free fragment is 2048
               RAM used:   30 (8%) at main() level
                           43 (12%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   264
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 41,22
0005:  DATA 43,10
0006:  DATA 3D,10
0007:  DATA 25,18
0008:  DATA 34,36
0009:  DATA 64,00
*
0123:  MOVF   20,W
0124:  MOVWF  04
0125:  BCF    03.7
0126:  BTFSC  21.0
0127:  BSF    03.7
0128:  MOVF   41,W
0129:  MOVWF  00
012A:  INCF   04,F
012B:  CLRF   00
012C:  INCF   20,F
012D:  BTFSC  03.2
012E:  INCF   21,F
012F:  RETURN
0130:  MOVF   0B,W
0131:  MOVWF  39
0132:  BCF    0B.7
0133:  BSF    03.5
0134:  BSF    03.6
0135:  BSF    0C.7
0136:  BSF    0C.0
0137:  NOP
0138:  NOP
0139:  BCF    03.5
013A:  BCF    03.6
013B:  BTFSC  39.7
013C:  BSF    0B.7
013D:  BTFSC  03.0
013E:  GOTO   167
013F:  BSF    03.6
0140:  MOVF   0C,W
0141:  ANDLW  7F
0142:  BCF    03.6
0143:  MOVWF  39
0144:  BSF    03.6
0145:  MOVF   0D,W
0146:  BCF    03.6
0147:  MOVWF  3A
0148:  BSF    03.6
0149:  MOVF   0F,W
014A:  BCF    03.6
014B:  MOVWF  3B
014C:  MOVF   39,W
014D:  MOVWF  41
014E:  CALL   123
014F:  MOVF   3A,W
0150:  BSF    03.6
0151:  MOVWF  0D
0152:  BCF    03.6
0153:  MOVF   3B,W
0154:  BSF    03.6
0155:  MOVWF  0F
0156:  BCF    03.6
0157:  MOVF   0B,W
0158:  MOVWF  3C
0159:  BCF    0B.7
015A:  BSF    03.5
015B:  BSF    03.6
015C:  BSF    0C.7
015D:  BSF    0C.0
015E:  NOP
015F:  NOP
0160:  BCF    03.5
0161:  BCF    03.6
0162:  BTFSC  3C.7
0163:  BSF    0B.7
0164:  DECFSZ 38,F
0165:  GOTO   167
0166:  GOTO   186
0167:  BSF    03.6
0168:  RLF    0C,W
0169:  RLF    0E,W
016A:  ANDLW  7F
016B:  BCF    03.6
016C:  MOVWF  39
016D:  BSF    03.6
016E:  MOVF   0D,W
016F:  BCF    03.6
0170:  MOVWF  3A
0171:  BSF    03.6
0172:  MOVF   0F,W
0173:  BCF    03.6
0174:  MOVWF  3B
0175:  MOVF   39,W
0176:  MOVWF  41
0177:  CALL   123
0178:  MOVF   3A,W
0179:  BSF    03.6
017A:  MOVWF  0D
017B:  BCF    03.6
017C:  MOVF   3B,W
017D:  BSF    03.6
017E:  MOVWF  0F
017F:  INCF   0D,F
0180:  BTFSC  03.2
0181:  INCF   0F,F
0182:  BCF    03.0
0183:  BCF    03.6
0184:  DECFSZ 38,F
0185:  GOTO   130
0186:  BCF    0A.3
0187:  BCF    0A.4
0188:  GOTO   2AA (RETURN)
0189:  CLRF   40
018A:  MOVF   04,W
018B:  MOVWF  3F
018C:  BCF    40.0
018D:  BTFSC  03.7
018E:  BSF    40.0
018F:  BTFSS  39.7
0190:  GOTO   199
0191:  BSF    3F.7
0192:  BTFSS  3F.4
0193:  INCF   3F,F
0194:  COMF   38,F
0195:  COMF   39,F
0196:  INCF   38,F
0197:  BTFSC  03.2
0198:  INCF   39,F
0199:  SWAPF  39,W
019A:  IORLW  F0
019B:  MOVWF  3B
019C:  ADDWF  3B,F
019D:  ADDLW  E2
019E:  MOVWF  3C
019F:  ADDLW  32
01A0:  MOVWF  3E
01A1:  MOVF   39,W
01A2:  ANDLW  0F
01A3:  ADDWF  3C,F
01A4:  ADDWF  3C,F
01A5:  ADDWF  3E,F
01A6:  ADDLW  E9
01A7:  MOVWF  3D
01A8:  ADDWF  3D,F
01A9:  ADDWF  3D,F
01AA:  SWAPF  38,W
01AB:  ANDLW  0F
01AC:  ADDWF  3D,F
01AD:  ADDWF  3E,F
01AE:  RLF    3D,F
01AF:  RLF    3E,F
01B0:  COMF   3E,F
01B1:  RLF    3E,F
01B2:  MOVF   38,W
01B3:  ANDLW  0F
01B4:  ADDWF  3E,F
01B5:  RLF    3B,F
01B6:  MOVLW  07
01B7:  MOVWF  3A
01B8:  MOVLW  0A
01B9:  ADDWF  3E,F
01BA:  DECF   3D,F
01BB:  BTFSS  03.0
01BC:  GOTO   1B9
01BD:  ADDWF  3D,F
01BE:  DECF   3C,F
01BF:  BTFSS  03.0
01C0:  GOTO   1BD
01C1:  ADDWF  3C,F
01C2:  DECF   3B,F
01C3:  BTFSS  03.0
01C4:  GOTO   1C1
01C5:  ADDWF  3B,F
01C6:  DECF   3A,F
01C7:  BTFSS  03.0
01C8:  GOTO   1C5
01C9:  MOVLW  3A
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  MOVLW  07
01CD:  ANDWF  3F,W
01CE:  BCF    3F.6
01CF:  DECF   04,F
01D0:  ANDWF  3F,W
01D1:  BTFSS  03.2
01D2:  GOTO   1DA
01D3:  BTFSC  3F.4
01D4:  INCF   04,F
01D5:  BTFSC  3F.4
01D6:  GOTO   1DA
01D7:  MOVLW  20
01D8:  MOVWF  77
01D9:  GOTO   1F7
01DA:  ADDWF  04,F
01DB:  MOVLW  3E
01DC:  SUBWF  04,W
01DD:  BTFSC  03.2
01DE:  BSF    3F.6
01DF:  MOVF   00,W
01E0:  MOVWF  77
01E1:  BTFSS  03.2
01E2:  GOTO   1EB
01E3:  BTFSC  3F.6
01E4:  GOTO   1EB
01E5:  BTFSC  3F.4
01E6:  GOTO   205
01E7:  BTFSC  3F.3
01E8:  GOTO   1EB
01E9:  MOVLW  20
01EA:  GOTO   1F6
01EB:  BTFSS  3F.7
01EC:  GOTO   1F3
01ED:  MOVLW  2D
01EE:  MOVWF  77
01EF:  DECF   04,F
01F0:  BCF    3F.6
01F1:  BCF    3F.7
01F2:  GOTO   1F7
01F3:  BSF    3F.3
01F4:  BCF    3F.4
01F5:  MOVLW  30
01F6:  ADDWF  77,F
01F7:  CLRF   39
01F8:  MOVF   04,W
01F9:  MOVWF  38
01FA:  BCF    39.0
01FB:  BTFSC  03.7
01FC:  BSF    39.0
01FD:  MOVF   77,W
01FE:  MOVWF  41
01FF:  CALL   123
0200:  MOVF   38,W
0201:  MOVWF  04
0202:  BCF    03.7
0203:  BTFSC  39.0
0204:  BSF    03.7
0205:  INCF   04,F
0206:  BTFSS  3F.6
0207:  GOTO   1DB
0208:  BCF    0A.3
0209:  BCF    0A.4
020A:  GOTO   2B1 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10  
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
000A:  MOVLW  3D
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01D
0010:  MOVLW  06
0011:  MOVWF  78
0012:  CLRF   77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 78,F
0016:  GOTO   012
0017:  MOVLW  7B
0018:  MOVWF  77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 00,F
001C:  GOTO   010
001D:  RETURN
....................  
....................  
....................  
.................... #define LCD_RS_PIN      PIN_D1 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... #define NULL 0 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0087:  BSF    08.4
....................    output_float(LCD_DATA5); 
0088:  BSF    08.5
....................    output_float(LCD_DATA6); 
0089:  BSF    08.6
....................    output_float(LCD_DATA7); 
008A:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
008B:  BCF    03.5
008C:  BSF    08.2
008D:  BSF    03.5
008E:  BCF    08.2
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_enable(1); 
0090:  BCF    03.5
0091:  BSF    08.3
0092:  BSF    03.5
0093:  BCF    08.3
....................    delay_cycles(1); 
0094:  NOP
....................    high = lcd_read_nibble(); 
0095:  BCF    03.5
0096:  CALL   04E
0097:  MOVF   78,W
0098:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
0099:  BCF    08.3
009A:  BSF    03.5
009B:  BCF    08.3
....................    delay_cycles(1); 
009C:  NOP
....................    lcd_output_enable(1); 
009D:  BCF    03.5
009E:  BSF    08.3
009F:  BSF    03.5
00A0:  BCF    08.3
....................    delay_us(1); 
00A1:  GOTO   0A2
00A2:  GOTO   0A3
00A3:  NOP
....................    low = lcd_read_nibble(); 
00A4:  BCF    03.5
00A5:  CALL   04E
00A6:  MOVF   78,W
00A7:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
00A8:  BCF    08.3
00A9:  BSF    03.5
00AA:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00AB:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00AC:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00AD:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00AE:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00AF:  BCF    03.5
00B0:  SWAPF  43,W
00B1:  MOVWF  77
00B2:  MOVLW  F0
00B3:  ANDWF  77,F
00B4:  MOVF   77,W
00B5:  IORWF  42,W
00B6:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
004E:  CLRF   44
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
004F:  BSF    03.5
0050:  BSF    08.4
0051:  MOVLW  00
0052:  BCF    03.5
0053:  BTFSC  08.4
0054:  MOVLW  01
0055:  IORWF  44,F
....................    n |= input(LCD_DATA5) << 1; 
0056:  BSF    03.5
0057:  BSF    08.5
0058:  MOVLW  00
0059:  BCF    03.5
005A:  BTFSC  08.5
005B:  MOVLW  01
005C:  MOVWF  77
005D:  BCF    03.0
005E:  RLF    77,F
005F:  MOVF   77,W
0060:  IORWF  44,F
....................    n |= input(LCD_DATA6) << 2; 
0061:  BSF    03.5
0062:  BSF    08.6
0063:  MOVLW  00
0064:  BCF    03.5
0065:  BTFSC  08.6
0066:  MOVLW  01
0067:  MOVWF  77
0068:  RLF    77,F
0069:  RLF    77,F
006A:  MOVLW  FC
006B:  ANDWF  77,F
006C:  MOVF   77,W
006D:  IORWF  44,F
....................    n |= input(LCD_DATA7) << 3; 
006E:  BSF    03.5
006F:  BSF    08.7
0070:  MOVLW  00
0071:  BCF    03.5
0072:  BTFSC  08.7
0073:  MOVLW  01
0074:  MOVWF  77
0075:  RLF    77,F
0076:  RLF    77,F
0077:  RLF    77,F
0078:  MOVLW  F8
0079:  ANDWF  77,F
007A:  MOVF   77,W
007B:  IORWF  44,F
....................     
....................    return(n); 
007C:  MOVF   44,W
007D:  MOVWF  78
....................   #else 
007E:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
001E:  BTFSC  43.0
001F:  GOTO   022
0020:  BCF    08.4
0021:  GOTO   023
0022:  BSF    08.4
0023:  BSF    03.5
0024:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0025:  BCF    03.5
0026:  BTFSC  43.1
0027:  GOTO   02A
0028:  BCF    08.5
0029:  GOTO   02B
002A:  BSF    08.5
002B:  BSF    03.5
002C:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
002D:  BCF    03.5
002E:  BTFSC  43.2
002F:  GOTO   032
0030:  BCF    08.6
0031:  GOTO   033
0032:  BSF    08.6
0033:  BSF    03.5
0034:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0035:  BCF    03.5
0036:  BTFSC  43.3
0037:  GOTO   03A
0038:  BCF    08.7
0039:  GOTO   03B
003A:  BSF    08.7
003B:  BSF    03.5
003C:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
003D:  NOP
....................    lcd_output_enable(1); 
003E:  BCF    03.5
003F:  BSF    08.3
0040:  BSF    03.5
0041:  BCF    08.3
....................    delay_us(2); 
0042:  MOVLW  02
0043:  MOVWF  77
0044:  DECFSZ 77,F
0045:  GOTO   044
0046:  GOTO   047
0047:  NOP
....................    lcd_output_enable(0); 
0048:  BCF    03.5
0049:  BCF    08.3
004A:  BSF    03.5
004B:  BCF    08.3
004C:  BCF    03.5
004D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
007F:  BSF    03.5
0080:  BCF    08.3
....................    lcd_rs_tris(); 
0081:  BCF    08.1
....................    lcd_rw_tris(); 
0082:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0083:  BCF    03.5
0084:  BCF    08.1
0085:  BSF    03.5
0086:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B7:  MOVF   78,W
00B8:  MOVWF  42
00B9:  BTFSS  42.7
00BA:  GOTO   0BD
00BB:  BSF    03.5
00BC:  GOTO   087
....................    lcd_output_rs(address); 
00BD:  MOVF   40,F
00BE:  BTFSS  03.2
00BF:  GOTO   0C2
00C0:  BCF    08.1
00C1:  GOTO   0C3
00C2:  BSF    08.1
00C3:  BSF    03.5
00C4:  BCF    08.1
....................    delay_cycles(1); 
00C5:  NOP
....................    lcd_output_rw(0); 
00C6:  BCF    03.5
00C7:  BCF    08.2
00C8:  BSF    03.5
00C9:  BCF    08.2
....................    delay_cycles(1); 
00CA:  NOP
....................    lcd_output_enable(0); 
00CB:  BCF    03.5
00CC:  BCF    08.3
00CD:  BSF    03.5
00CE:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00CF:  BCF    03.5
00D0:  SWAPF  41,W
00D1:  MOVWF  42
00D2:  MOVLW  0F
00D3:  ANDWF  42,F
00D4:  MOVF   42,W
00D5:  MOVWF  43
00D6:  CALL   01E
....................    lcd_send_nibble(n & 0xf); 
00D7:  MOVF   41,W
00D8:  ANDLW  0F
00D9:  MOVWF  42
00DA:  MOVWF  43
00DB:  CALL   01E
00DC:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00DD:  MOVLW  28
00DE:  MOVWF  39
00DF:  MOVLW  0C
00E0:  MOVWF  3A
00E1:  MOVLW  01
00E2:  MOVWF  3B
00E3:  MOVLW  06
00E4:  MOVWF  3C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00E5:  BCF    08.3
00E6:  BSF    03.5
00E7:  BCF    08.3
....................    lcd_output_rs(0); 
00E8:  BCF    03.5
00E9:  BCF    08.1
00EA:  BSF    03.5
00EB:  BCF    08.1
....................    lcd_output_rw(0); 
00EC:  BCF    03.5
00ED:  BCF    08.2
00EE:  BSF    03.5
00EF:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F0:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F1:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F2:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F3:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F4:  BCF    08.3
....................    lcd_rs_tris(); 
00F5:  BCF    08.1
....................    lcd_rw_tris(); 
00F6:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00F7:  MOVLW  0F
00F8:  BCF    03.5
00F9:  MOVWF  3D
00FA:  CALL   00A
....................    for(i=1;i<=3;++i) 
00FB:  MOVLW  01
00FC:  MOVWF  38
00FD:  MOVF   38,W
00FE:  SUBLW  03
00FF:  BTFSS  03.0
0100:  GOTO   109
....................    { 
....................        lcd_send_nibble(3); 
0101:  MOVLW  03
0102:  MOVWF  43
0103:  CALL   01E
....................        delay_ms(5); 
0104:  MOVLW  05
0105:  MOVWF  3D
0106:  CALL   00A
0107:  INCF   38,F
0108:  GOTO   0FD
....................    } 
....................     
....................    lcd_send_nibble(2); 
0109:  MOVLW  02
010A:  MOVWF  43
010B:  CALL   01E
....................    delay_ms(5); 
010C:  MOVLW  05
010D:  MOVWF  3D
010E:  CALL   00A
....................    for(i=0;i<=3;++i) 
010F:  CLRF   38
0110:  MOVF   38,W
0111:  SUBLW  03
0112:  BTFSS  03.0
0113:  GOTO   120
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0114:  MOVLW  39
0115:  ADDWF  38,W
0116:  MOVWF  04
0117:  BCF    03.7
0118:  MOVF   00,W
0119:  MOVWF  3D
011A:  CLRF   40
011B:  MOVF   3D,W
011C:  MOVWF  41
011D:  CALL   07F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011E:  INCF   38,F
011F:  GOTO   110
0120:  BCF    0A.3
0121:  BCF    0A.4
0122:  GOTO   273 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
020B:  DECFSZ 3D,W
020C:  GOTO   20E
020D:  GOTO   211
....................       address=LCD_LINE_TWO; 
020E:  MOVLW  40
020F:  MOVWF  3E
0210:  GOTO   212
....................    else 
....................       address=0; 
0211:  CLRF   3E
....................       
....................    address+=x-1; 
0212:  MOVLW  01
0213:  SUBWF  3C,W
0214:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
0215:  MOVF   3E,W
0216:  IORLW  80
0217:  MOVWF  3F
0218:  CLRF   40
0219:  MOVF   3F,W
021A:  MOVWF  41
021B:  CALL   07F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
021C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0232:  MOVF   3B,W
0233:  XORLW  07
0234:  BTFSC  03.2
0235:  GOTO   240
0236:  XORLW  0B
0237:  BTFSC  03.2
0238:  GOTO   245
0239:  XORLW  06
023A:  BTFSC  03.2
023B:  GOTO   24D
023C:  XORLW  02
023D:  BTFSC  03.2
023E:  GOTO   253
023F:  GOTO   258
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0240:  MOVLW  01
0241:  MOVWF  3C
0242:  MOVWF  3D
0243:  CALL   20B
0244:  GOTO   25D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0245:  CLRF   40
0246:  MOVLW  01
0247:  MOVWF  41
0248:  CALL   07F
....................                      delay_ms(2); 
0249:  MOVLW  02
024A:  MOVWF  3D
024B:  CALL   00A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
024C:  GOTO   25D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
024D:  MOVLW  01
024E:  MOVWF  3C
024F:  MOVLW  02
0250:  MOVWF  3D
0251:  CALL   20B
0252:  GOTO   25D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0253:  CLRF   40
0254:  MOVLW  10
0255:  MOVWF  41
0256:  CALL   07F
0257:  GOTO   25D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0258:  MOVLW  01
0259:  MOVWF  40
025A:  MOVF   3B,W
025B:  MOVWF  41
025C:  CALL   07F
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_byte(0,0x01); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_puts(char *str) 
.................... { 
....................    while(*str!=NULL) 
*
021D:  MOVF   39,W
021E:  MOVWF  7A
021F:  MOVF   38,W
0220:  MOVWF  04
0221:  BCF    03.7
0222:  BTFSC  7A.0
0223:  BSF    03.7
0224:  MOVF   00,F
0225:  BTFSC  03.2
0226:  GOTO   261
....................    { 
....................       lcd_putc(*str); 
0227:  MOVF   39,W
0228:  MOVWF  7A
0229:  MOVF   38,W
022A:  MOVWF  04
022B:  BCF    03.7
022C:  BTFSC  7A.0
022D:  BSF    03.7
022E:  MOVF   00,W
022F:  MOVWF  3A
0230:  MOVF   3A,W
0231:  MOVWF  3B
....................       str++; 
*
025D:  INCF   38,F
025E:  BTFSC  03.2
025F:  INCF   39,F
0260:  GOTO   21D
....................    } 
0261:  BCF    0A.3
0262:  BCF    0A.4
0263:  GOTO   2BA (RETURN)
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void main()  
0264:  MOVF   03,W
0265:  ANDLW  1F
0266:  MOVWF  03
0267:  CLRF   21
0268:  CLRF   20
0269:  BSF    03.5
026A:  BSF    1F.0
026B:  BSF    1F.1
026C:  BSF    1F.2
026D:  BCF    1F.3
026E:  MOVLW  07
026F:  MOVWF  1C
0270:  BCF    03.7
.................... { 
....................    int16 adc_value;  
....................    char string[LCD_LINE_LENGTH]; 
....................     
....................    lcd_init(); 
0271:  BCF    03.5
0272:  GOTO   0DD
....................    delay_ms(1000); 
0273:  MOVLW  04
0274:  MOVWF  38
0275:  MOVLW  FA
0276:  MOVWF  3D
0277:  CALL   00A
0278:  DECFSZ 38,F
0279:  GOTO   275
....................    
....................    setup_adc(ADC_CLOCK_INTERNAL); 
027A:  BSF    03.5
027B:  BCF    1F.6
027C:  BCF    03.5
027D:  BSF    1F.6
027E:  BSF    1F.7
027F:  BSF    03.5
0280:  BSF    1F.7
0281:  BCF    03.5
0282:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG);     // Sets up the ADC pins to be analog 
0283:  BSF    03.5
0284:  BCF    1F.0
0285:  BCF    1F.1
0286:  BCF    1F.2
0287:  BCF    1F.3
....................    set_adc_channel(1);              // config AN1 
0288:  MOVLW  08
0289:  MOVWF  78
028A:  BCF    03.5
028B:  MOVF   1F,W
028C:  ANDLW  C7
028D:  IORWF  78,W
028E:  MOVWF  1F
....................    delay_us(10); 
028F:  MOVLW  10
0290:  MOVWF  77
0291:  DECFSZ 77,F
0292:  GOTO   291
0293:  NOP
....................     
....................    while (TRUE) { 
....................       adc_value = read_adc();      
0294:  BSF    1F.2
0295:  BTFSC  1F.2
0296:  GOTO   295
0297:  BSF    03.5
0298:  MOVF   1E,W
0299:  BCF    03.5
029A:  MOVWF  22
029B:  MOVF   1E,W
029C:  MOVWF  23
....................       sprintf(string, "ADC = %04ld", adc_value);  // 4 digits 
029D:  CLRF   21
029E:  MOVLW  24
029F:  MOVWF  20
02A0:  MOVLW  04
02A1:  BSF    03.6
02A2:  MOVWF  0D
02A3:  MOVLW  00
02A4:  MOVWF  0F
02A5:  BCF    03.0
02A6:  MOVLW  06
02A7:  BCF    03.6
02A8:  MOVWF  38
02A9:  GOTO   130
02AA:  MOVLW  0A
02AB:  MOVWF  04
02AC:  MOVF   23,W
02AD:  MOVWF  39
02AE:  MOVF   22,W
02AF:  MOVWF  38
02B0:  GOTO   189
....................        
....................       lcd_gotoxy(4, 1);                         
02B1:  MOVLW  04
02B2:  MOVWF  3C
02B3:  MOVLW  01
02B4:  MOVWF  3D
02B5:  CALL   20B
....................       lcd_puts(string); 
02B6:  CLRF   39
02B7:  MOVLW  24
02B8:  MOVWF  38
02B9:  GOTO   21D
....................        
....................       delay_ms(100); 
02BA:  MOVLW  64
02BB:  MOVWF  3D
02BC:  CALL   00A
02BD:  GOTO   294
....................    } 
.................... } 
02BE:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
