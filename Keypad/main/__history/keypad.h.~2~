#define rowA(b) output_bit(PIN_B7, b)
#define rowB(b) output_bit(PIN_B6, b)
#define rowC(b) output_bit(PIN_B5, b)
#define rowD(b) output_bit(PIN_B4, b)

#define col1(b) output_bit(PIN_B3, b)
#define col2(b) output_bit(PIN_B2, b)
#define col3(b) output_bit(PIN_B1, b)
#define col4(b) output_bit(PIN_B0, b)

#define col4 input(PIN_B0)

/*char scan_rowA()                   // Function for finding the row for column 1
{
   rowA(1); rowB(1); rowC(1); rowD(1);
   col1(0)l col2(0); col3(0); col4(0);

   if(R1 == 0)
      lcd_data('7');
   else if(R2 == 0)
      lcd_data('4');
   else if(R3 == 0)
      lcd_data('1');
   else if(R4 == 0)  
      lcd_cmd(0); 
}

void row_finder2()                   // Function for finding the row for column 2
{
   R1 = R2 = R3 = R4 = 1;
   C1 = C2 = C3 = C4 = 0;
   if(R1 == 0)
      lcd_data('8');
   else if(R2 == 0)
      lcd_data('5');
   else if(R3 == 0)
      lcd_data('2');
   else if(R4 == 0)
      lcd_data('0');
}

void row_finder3()                   // Function for finding the row for column 3
{
   R1 = R2 = R3 = R4 = 1;
   C1 = C2 = C3 = C4 = 0;
   if(R1 == 0)
      lcd_data('9');
   else if(R2 == 0)
      lcd_data('6');
   else if(R3 == 0)
      lcd_data('3');
   else if(R4 == 0)
      lcd_data('=');
}

void row_finder4()                   // Function for finding the row for column 4
{
   R1 = R2 = R3 = R4 = 1;
   C1 = C2 = C3 = C4 = 0;
   if(R1 == 0)
      lcd_data(253);               // dau chia 
   else if(R2 == 0)   
      lcd_data('*');      
   else if(R3 == 0)
      lcd_data('-');
   else if(R4 == 0)
      lcd_data('+');
}*/
