CCS PCM C Compiler, Version 5.015, 5967               16-Sep-23 18:44

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\lcd_16x2\main\main.lst

               ROM used:   438 words (5%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           39 (11%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   174
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0004:  MOVLW  3A
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #define LCD_RS_PIN      PIN_D1 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... #define NULL 0 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0081:  BSF    08.4
....................    output_float(LCD_DATA5); 
0082:  BSF    08.5
....................    output_float(LCD_DATA6); 
0083:  BSF    08.6
....................    output_float(LCD_DATA7); 
0084:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0085:  BCF    03.5
0086:  BSF    08.2
0087:  BSF    03.5
0088:  BCF    08.2
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_enable(1); 
008A:  BCF    03.5
008B:  BSF    08.3
008C:  BSF    03.5
008D:  BCF    08.3
....................    delay_cycles(1); 
008E:  NOP
....................    high = lcd_read_nibble(); 
008F:  BCF    03.5
0090:  CALL   048
0091:  MOVF   78,W
0092:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
0093:  BCF    08.3
0094:  BSF    03.5
0095:  BCF    08.3
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(1); 
0097:  BCF    03.5
0098:  BSF    08.3
0099:  BSF    03.5
009A:  BCF    08.3
....................    delay_us(1); 
009B:  GOTO   09C
009C:  GOTO   09D
009D:  NOP
....................    low = lcd_read_nibble(); 
009E:  BCF    03.5
009F:  CALL   048
00A0:  MOVF   78,W
00A1:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
00A2:  BCF    08.3
00A3:  BSF    03.5
00A4:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00A5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00A6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00A7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00A8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00A9:  BCF    03.5
00AA:  SWAPF  40,W
00AB:  MOVWF  77
00AC:  MOVLW  F0
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  IORWF  3F,W
00B0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0048:  CLRF   41
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0049:  BSF    03.5
004A:  BSF    08.4
004B:  MOVLW  00
004C:  BCF    03.5
004D:  BTFSC  08.4
004E:  MOVLW  01
004F:  IORWF  41,F
....................    n |= input(LCD_DATA5) << 1; 
0050:  BSF    03.5
0051:  BSF    08.5
0052:  MOVLW  00
0053:  BCF    03.5
0054:  BTFSC  08.5
0055:  MOVLW  01
0056:  MOVWF  77
0057:  BCF    03.0
0058:  RLF    77,F
0059:  MOVF   77,W
005A:  IORWF  41,F
....................    n |= input(LCD_DATA6) << 2; 
005B:  BSF    03.5
005C:  BSF    08.6
005D:  MOVLW  00
005E:  BCF    03.5
005F:  BTFSC  08.6
0060:  MOVLW  01
0061:  MOVWF  77
0062:  RLF    77,F
0063:  RLF    77,F
0064:  MOVLW  FC
0065:  ANDWF  77,F
0066:  MOVF   77,W
0067:  IORWF  41,F
....................    n |= input(LCD_DATA7) << 3; 
0068:  BSF    03.5
0069:  BSF    08.7
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.7
006D:  MOVLW  01
006E:  MOVWF  77
006F:  RLF    77,F
0070:  RLF    77,F
0071:  RLF    77,F
0072:  MOVLW  F8
0073:  ANDWF  77,F
0074:  MOVF   77,W
0075:  IORWF  41,F
....................     
....................    return(n); 
0076:  MOVF   41,W
0077:  MOVWF  78
....................   #else 
0078:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0018:  BTFSC  40.0
0019:  GOTO   01C
001A:  BCF    08.4
001B:  GOTO   01D
001C:  BSF    08.4
001D:  BSF    03.5
001E:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
001F:  BCF    03.5
0020:  BTFSC  40.1
0021:  GOTO   024
0022:  BCF    08.5
0023:  GOTO   025
0024:  BSF    08.5
0025:  BSF    03.5
0026:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0027:  BCF    03.5
0028:  BTFSC  40.2
0029:  GOTO   02C
002A:  BCF    08.6
002B:  GOTO   02D
002C:  BSF    08.6
002D:  BSF    03.5
002E:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
002F:  BCF    03.5
0030:  BTFSC  40.3
0031:  GOTO   034
0032:  BCF    08.7
0033:  GOTO   035
0034:  BSF    08.7
0035:  BSF    03.5
0036:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0037:  NOP
....................    lcd_output_enable(1); 
0038:  BCF    03.5
0039:  BSF    08.3
003A:  BSF    03.5
003B:  BCF    08.3
....................    delay_us(2); 
003C:  MOVLW  02
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  GOTO   041
0041:  NOP
....................    lcd_output_enable(0); 
0042:  BCF    03.5
0043:  BCF    08.3
0044:  BSF    03.5
0045:  BCF    08.3
0046:  BCF    03.5
0047:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0079:  BSF    03.5
007A:  BCF    08.3
....................    lcd_rs_tris(); 
007B:  BCF    08.1
....................    lcd_rw_tris(); 
007C:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
007D:  BCF    03.5
007E:  BCF    08.1
007F:  BSF    03.5
0080:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B1:  MOVF   78,W
00B2:  MOVWF  3F
00B3:  BTFSS  3F.7
00B4:  GOTO   0B7
00B5:  BSF    03.5
00B6:  GOTO   081
....................    lcd_output_rs(address); 
00B7:  MOVF   3D,F
00B8:  BTFSS  03.2
00B9:  GOTO   0BC
00BA:  BCF    08.1
00BB:  GOTO   0BD
00BC:  BSF    08.1
00BD:  BSF    03.5
00BE:  BCF    08.1
....................    delay_cycles(1); 
00BF:  NOP
....................    lcd_output_rw(0); 
00C0:  BCF    03.5
00C1:  BCF    08.2
00C2:  BSF    03.5
00C3:  BCF    08.2
....................    delay_cycles(1); 
00C4:  NOP
....................    lcd_output_enable(0); 
00C5:  BCF    03.5
00C6:  BCF    08.3
00C7:  BSF    03.5
00C8:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00C9:  BCF    03.5
00CA:  SWAPF  3E,W
00CB:  MOVWF  3F
00CC:  MOVLW  0F
00CD:  ANDWF  3F,F
00CE:  MOVF   3F,W
00CF:  MOVWF  40
00D0:  CALL   018
....................    lcd_send_nibble(n & 0xf); 
00D1:  MOVF   3E,W
00D2:  ANDLW  0F
00D3:  MOVWF  3F
00D4:  MOVWF  40
00D5:  CALL   018
00D6:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00D7:  MOVLW  28
00D8:  MOVWF  36
00D9:  MOVLW  0C
00DA:  MOVWF  37
00DB:  MOVLW  01
00DC:  MOVWF  38
00DD:  MOVLW  06
00DE:  MOVWF  39
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00DF:  BCF    08.3
00E0:  BSF    03.5
00E1:  BCF    08.3
....................    lcd_output_rs(0); 
00E2:  BCF    03.5
00E3:  BCF    08.1
00E4:  BSF    03.5
00E5:  BCF    08.1
....................    lcd_output_rw(0); 
00E6:  BCF    03.5
00E7:  BCF    08.2
00E8:  BSF    03.5
00E9:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00EA:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00EB:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00EC:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00ED:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EE:  BCF    08.3
....................    lcd_rs_tris(); 
00EF:  BCF    08.1
....................    lcd_rw_tris(); 
00F0:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00F1:  MOVLW  0F
00F2:  BCF    03.5
00F3:  MOVWF  3A
00F4:  CALL   004
....................    for(i=1;i<=3;++i) 
00F5:  MOVLW  01
00F6:  MOVWF  35
00F7:  MOVF   35,W
00F8:  SUBLW  03
00F9:  BTFSS  03.0
00FA:  GOTO   103
....................    { 
....................        lcd_send_nibble(3); 
00FB:  MOVLW  03
00FC:  MOVWF  40
00FD:  CALL   018
....................        delay_ms(5); 
00FE:  MOVLW  05
00FF:  MOVWF  3A
0100:  CALL   004
0101:  INCF   35,F
0102:  GOTO   0F7
....................    } 
....................     
....................    lcd_send_nibble(2); 
0103:  MOVLW  02
0104:  MOVWF  40
0105:  CALL   018
....................    delay_ms(5); 
0106:  MOVLW  05
0107:  MOVWF  3A
0108:  CALL   004
....................    for(i=0;i<=3;++i) 
0109:  CLRF   35
010A:  MOVF   35,W
010B:  SUBLW  03
010C:  BTFSS  03.0
010D:  GOTO   11A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
010E:  MOVLW  36
010F:  ADDWF  35,W
0110:  MOVWF  04
0111:  BCF    03.7
0112:  MOVF   00,W
0113:  MOVWF  3A
0114:  CLRF   3D
0115:  MOVF   3A,W
0116:  MOVWF  3E
0117:  CALL   079
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0118:  INCF   35,F
0119:  GOTO   10A
011A:  BCF    0A.3
011B:  BCF    0A.4
011C:  GOTO   1A2 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
011D:  DECFSZ 3A,W
011E:  GOTO   120
011F:  GOTO   123
....................       address=LCD_LINE_TWO; 
0120:  MOVLW  40
0121:  MOVWF  3B
0122:  GOTO   124
....................    else 
....................       address=0; 
0123:  CLRF   3B
....................       
....................    address+=x-1; 
0124:  MOVLW  01
0125:  SUBWF  39,W
0126:  ADDWF  3B,F
....................    lcd_send_byte(0,0x80|address); 
0127:  MOVF   3B,W
0128:  IORLW  80
0129:  MOVWF  3C
012A:  CLRF   3D
012B:  MOVF   3C,W
012C:  MOVWF  3E
012D:  CALL   079
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012E:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0144:  MOVF   38,W
0145:  XORLW  07
0146:  BTFSC  03.2
0147:  GOTO   152
0148:  XORLW  0B
0149:  BTFSC  03.2
014A:  GOTO   157
014B:  XORLW  06
014C:  BTFSC  03.2
014D:  GOTO   15F
014E:  XORLW  02
014F:  BTFSC  03.2
0150:  GOTO   165
0151:  GOTO   16A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0152:  MOVLW  01
0153:  MOVWF  39
0154:  MOVWF  3A
0155:  CALL   11D
0156:  GOTO   16F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0157:  CLRF   3D
0158:  MOVLW  01
0159:  MOVWF  3E
015A:  CALL   079
....................                      delay_ms(2); 
015B:  MOVLW  02
015C:  MOVWF  3A
015D:  CALL   004
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
015E:  GOTO   16F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
015F:  MOVLW  01
0160:  MOVWF  39
0161:  MOVLW  02
0162:  MOVWF  3A
0163:  CALL   11D
0164:  GOTO   16F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0165:  CLRF   3D
0166:  MOVLW  10
0167:  MOVWF  3E
0168:  CALL   079
0169:  GOTO   16F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
016A:  MOVLW  01
016B:  MOVWF  3D
016C:  MOVF   38,W
016D:  MOVWF  3E
016E:  CALL   079
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_byte(0,0x01); 
....................    delay_ms(2); 
.................... } 
....................  
.................... void lcd_puts(char *str) 
.................... { 
....................    while(*str!=NULL) 
*
012F:  MOVF   36,W
0130:  MOVWF  7A
0131:  MOVF   35,W
0132:  MOVWF  04
0133:  BCF    03.7
0134:  BTFSC  7A.0
0135:  BSF    03.7
0136:  MOVF   00,F
0137:  BTFSC  03.2
0138:  GOTO   173
....................    { 
....................       lcd_putc(*str); 
0139:  MOVF   36,W
013A:  MOVWF  7A
013B:  MOVF   35,W
013C:  MOVWF  04
013D:  BCF    03.7
013E:  BTFSC  7A.0
013F:  BSF    03.7
0140:  MOVF   00,W
0141:  MOVWF  37
0142:  MOVF   37,W
0143:  MOVWF  38
....................       str++; 
*
016F:  INCF   35,F
0170:  BTFSC  03.2
0171:  INCF   36,F
0172:  GOTO   12F
....................    } 
0173:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... void main() { 
0174:  MOVF   03,W
0175:  ANDLW  1F
0176:  MOVWF  03
0177:  BSF    03.5
0178:  BSF    1F.0
0179:  BSF    1F.1
017A:  BSF    1F.2
017B:  BCF    1F.3
017C:  MOVLW  07
017D:  MOVWF  1C
017E:  BCF    03.7
....................    char string1[10] = "CHELSEA"; 
017F:  MOVLW  43
0180:  BCF    03.5
0181:  MOVWF  21
0182:  MOVLW  48
0183:  MOVWF  22
0184:  MOVLW  45
0185:  MOVWF  23
0186:  MOVLW  4C
0187:  MOVWF  24
0188:  MOVLW  53
0189:  MOVWF  25
018A:  MOVLW  45
018B:  MOVWF  26
018C:  MOVLW  41
018D:  MOVWF  27
018E:  CLRF   28
....................    char string2[10] = "TOTTENHAM"; 
018F:  MOVLW  54
0190:  MOVWF  2B
0191:  MOVLW  4F
0192:  MOVWF  2C
0193:  MOVLW  54
0194:  MOVWF  2D
0195:  MOVWF  2E
0196:  MOVLW  45
0197:  MOVWF  2F
0198:  MOVLW  4E
0199:  MOVWF  30
019A:  MOVLW  48
019B:  MOVWF  31
019C:  MOVLW  41
019D:  MOVWF  32
019E:  MOVLW  4D
019F:  MOVWF  33
01A0:  CLRF   34
....................     
....................    lcd_init(); 
01A1:  GOTO   0D7
....................     
....................    lcd_gotoxy(6,1);  // col 6, row 1 
01A2:  MOVLW  06
01A3:  MOVWF  39
01A4:  MOVLW  01
01A5:  MOVWF  3A
01A6:  CALL   11D
....................    lcd_puts(string1); 
01A7:  CLRF   36
01A8:  MOVLW  21
01A9:  MOVWF  35
01AA:  CALL   12F
....................     
....................    lcd_gotoxy(5,2);  // col 5, row 2 
01AB:  MOVLW  05
01AC:  MOVWF  39
01AD:  MOVLW  02
01AE:  MOVWF  3A
01AF:  CALL   11D
....................    lcd_puts(string2); 
01B0:  CLRF   36
01B1:  MOVLW  2B
01B2:  MOVWF  35
01B3:  CALL   12F
....................     
....................    while(TRUE) { 
01B4:  GOTO   1B4
....................        
....................    } 
.................... } 
01B5:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
