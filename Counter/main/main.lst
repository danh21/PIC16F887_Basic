CCS PCM C Compiler, Version 5.015, 5967               10-Sep-23 19:53

               Filename:   D:\cd\PIC_16F887A\Project\PIC16F887_Basic\Counter\main\main.lst

               ROM used:   143 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           10 (3%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07D
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
003F:  MOVLW  23
0040:  MOVWF  04
0041:  BCF    03.7
0042:  MOVF   00,W
0043:  BTFSC  03.2
0044:  GOTO   052
0045:  MOVLW  06
0046:  MOVWF  78
0047:  CLRF   77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  DECFSZ 78,F
004B:  GOTO   047
004C:  MOVLW  7B
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 00,F
0051:  GOTO   045
0052:  RETURN
....................  
....................  
....................  
.................... #include "74ls47.h" 
.................... #define LS47_A(x) output_bit(PIN_C0, x) 
.................... #define LS47_B(x) output_bit(PIN_C1, x) 
.................... #define LS47_C(x) output_bit(PIN_C2, x) 
.................... #define LS47_D(x) output_bit(PIN_C3, x) 
....................  
....................  
....................  
.................... void Led7Seg_OUT(unsigned char num)  
.................... { 
....................    LS47_A(num & 1); 
*
0004:  BTFSC  23.0
0005:  GOTO   008
0006:  BCF    07.0
0007:  GOTO   009
0008:  BSF    07.0
0009:  BCF    20.0
000A:  MOVF   20,W
000B:  BSF    03.5
000C:  MOVWF  07
....................    LS47_B((num >> 1) & 1); 
000D:  BCF    03.0
000E:  BCF    03.5
000F:  RRF    23,W
0010:  ANDLW  01
0011:  BTFSS  03.2
0012:  GOTO   015
0013:  BCF    07.1
0014:  GOTO   016
0015:  BSF    07.1
0016:  BCF    20.1
0017:  MOVF   20,W
0018:  BSF    03.5
0019:  MOVWF  07
....................    LS47_C((num >> 2) & 1); 
001A:  BCF    03.5
001B:  RRF    23,W
001C:  MOVWF  77
001D:  RRF    77,F
001E:  MOVLW  3F
001F:  ANDWF  77,F
0020:  MOVF   77,W
0021:  ANDLW  01
0022:  BTFSS  03.2
0023:  GOTO   026
0024:  BCF    07.2
0025:  GOTO   027
0026:  BSF    07.2
0027:  BCF    20.2
0028:  MOVF   20,W
0029:  BSF    03.5
002A:  MOVWF  07
....................    LS47_D((num >> 3) & 1); 
002B:  BCF    03.5
002C:  RRF    23,W
002D:  MOVWF  77
002E:  RRF    77,F
002F:  RRF    77,F
0030:  MOVLW  1F
0031:  ANDWF  77,F
0032:  MOVF   77,W
0033:  ANDLW  01
0034:  BTFSS  03.2
0035:  GOTO   038
0036:  BCF    07.3
0037:  GOTO   039
0038:  BSF    07.3
0039:  BCF    20.3
003A:  MOVF   20,W
003B:  BSF    03.5
003C:  MOVWF  07
003D:  BCF    03.5
003E:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... void countUp(void) 
*
0053:  CLRF   21
.................... { 
....................    unsigned char count = 0;    
....................    while (count < 9) { 
0054:  MOVF   21,W
0055:  SUBLW  08
0056:  BTFSS  03.0
0057:  GOTO   065
....................       Led7Seg_OUT(count++);          
0058:  MOVF   21,W
0059:  INCF   21,F
005A:  MOVWF  22
005B:  MOVWF  23
005C:  CALL   004
....................       delay_ms(500); 
005D:  MOVLW  02
005E:  MOVWF  22
005F:  MOVLW  FA
0060:  MOVWF  23
0061:  CALL   03F
0062:  DECFSZ 22,F
0063:  GOTO   05F
0064:  GOTO   054
....................    } 
0065:  BCF    0A.3
0066:  BCF    0A.4
0067:  GOTO   08C (RETURN)
.................... } 
....................  
....................  
....................  
.................... void countDown(void) 
0068:  MOVLW  09
0069:  MOVWF  21
.................... { 
....................    unsigned char count = 9;   
....................    while (count > 0) { 
006A:  MOVF   21,F
006B:  BTFSC  03.2
006C:  GOTO   07A
....................       Led7Seg_OUT(count--); 
006D:  MOVF   21,W
006E:  DECF   21,F
006F:  MOVWF  22
0070:  MOVWF  23
0071:  CALL   004
....................       delay_ms(500); 
0072:  MOVLW  02
0073:  MOVWF  22
0074:  MOVLW  FA
0075:  MOVWF  23
0076:  CALL   03F
0077:  DECFSZ 22,F
0078:  GOTO   074
0079:  GOTO   06A
....................    } 
007A:  BCF    0A.3
007B:  BCF    0A.4
007C:  GOTO   08D (RETURN)
.................... } 
....................  
....................  
.................... void main()  
007D:  MOVF   03,W
007E:  ANDLW  1F
007F:  MOVWF  03
0080:  MOVLW  FF
0081:  MOVWF  20
0082:  BSF    03.5
0083:  BSF    1F.0
0084:  BSF    1F.1
0085:  BSF    1F.2
0086:  BCF    1F.3
0087:  MOVLW  07
0088:  MOVWF  1C
0089:  BCF    03.7
.................... { 
....................    while (TRUE)  
....................    { 
....................       //TODO: User Code 
....................       countUp();      
008A:  BCF    03.5
008B:  GOTO   053
....................       countDown(); 
008C:  GOTO   068
008D:  GOTO   08B
....................    } 
.................... } 
008E:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
