CCS PCM C Compiler, Version 5.015, 5967               10-Sep-23 20:15

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\count_2numbers\main\main.lst

               ROM used:   157 words (2%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           23 (6%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07A
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVF   30,W
0005:  CLRF   78
0006:  SUBWF  2F,W
0007:  BTFSC  03.0
0008:  GOTO   00C
0009:  MOVF   2F,W
000A:  MOVWF  77
000B:  GOTO   018
000C:  CLRF   77
000D:  MOVLW  08
000E:  MOVWF  31
000F:  RLF    2F,F
0010:  RLF    77,F
0011:  MOVF   30,W
0012:  SUBWF  77,W
0013:  BTFSC  03.0
0014:  MOVWF  77
0015:  RLF    78,F
0016:  DECFSZ 31,F
0017:  GOTO   00F
0018:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20M) 
0019:  MOVLW  2F
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  06
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  7B
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
....................  
....................  
....................  
.................... #include "Led7seg_2dig.h" 
.................... #define Led7Seg_OUT(num) output_d(num) 
....................  
.................... #define Led7Seg1(b) output_bit(PIN_B0, b) 
.................... #define Led7Seg2(b) output_bit(PIN_B1, b) 
....................  
.................... #define scan_Led7Seg1 {Led7Seg2(1); Led7Seg1(0);} 
.................... #define scan_Led7Seg2 {Led7Seg1(1); Led7Seg2(0);} 
....................  
....................  
....................  
.................... unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
*
0085:  MOVLW  C0
0086:  BCF    03.5
0087:  MOVWF  20
0088:  MOVLW  F9
0089:  MOVWF  21
008A:  MOVLW  A4
008B:  MOVWF  22
008C:  MOVLW  B0
008D:  MOVWF  23
008E:  MOVLW  99
008F:  MOVWF  24
0090:  MOVLW  92
0091:  MOVWF  25
0092:  MOVLW  82
0093:  MOVWF  26
0094:  MOVLW  F8
0095:  MOVWF  27
0096:  MOVLW  80
0097:  MOVWF  28
0098:  MOVLW  90
0099:  MOVWF  29
....................  
....................  
....................  
.................... void display_led7seg(int value)  
.................... { 
....................    int dozens, units; 
....................     
....................    dozens = value / 10; 
*
003A:  MOVF   2C,W
003B:  MOVWF  2F
003C:  MOVLW  0A
003D:  MOVWF  30
003E:  CALL   004
003F:  MOVF   78,W
0040:  MOVWF  2D
....................    units = value % 10; 
0041:  MOVF   2C,W
0042:  MOVWF  2F
0043:  MOVLW  0A
0044:  MOVWF  30
0045:  CALL   004
0046:  MOVF   77,W
0047:  MOVWF  2E
....................    
....................    scan_Led7Seg1;   
0048:  BSF    06.1
0049:  BSF    03.5
004A:  BCF    06.1
004B:  BCF    03.5
004C:  BCF    06.0
004D:  BSF    03.5
004E:  BCF    06.0
....................    Led7Seg_OUT(number[dozens]); 
004F:  MOVLW  20
0050:  BCF    03.5
0051:  ADDWF  2D,W
0052:  MOVWF  04
0053:  BCF    03.7
0054:  MOVF   00,W
0055:  MOVWF  2F
0056:  BSF    03.5
0057:  CLRF   08
0058:  BCF    03.5
0059:  MOVF   2F,W
005A:  MOVWF  08
....................    delay_ms(1); 
005B:  MOVLW  01
005C:  MOVWF  2F
005D:  CALL   019
....................       
....................    scan_Led7Seg2; 
005E:  BSF    06.0
005F:  BSF    03.5
0060:  BCF    06.0
0061:  BCF    03.5
0062:  BCF    06.1
0063:  BSF    03.5
0064:  BCF    06.1
....................    Led7Seg_OUT(number[units]);     
0065:  MOVLW  20
0066:  BCF    03.5
0067:  ADDWF  2E,W
0068:  MOVWF  04
0069:  BCF    03.7
006A:  MOVF   00,W
006B:  MOVWF  2F
006C:  BSF    03.5
006D:  CLRF   08
006E:  BCF    03.5
006F:  MOVF   2F,W
0070:  MOVWF  08
....................    delay_ms(1);   
0071:  MOVLW  01
0072:  MOVWF  2F
0073:  CALL   019
.................... } 
....................  
....................  
....................  
....................  
.................... void countUp(void) 
.................... { 
....................    int count, t; 
....................     
....................    for (count = 0; count < 100; count++) { 
*
002D:  CLRF   2A
002E:  MOVF   2A,W
002F:  SUBLW  63
0030:  BTFSS  03.0
0031:  GOTO   077
....................       t = 0; 
0032:  CLRF   2B
....................       while (t++ < 200)  
0033:  MOVF   2B,W
0034:  INCF   2B,F
0035:  SUBLW  C7
0036:  BTFSS  03.0
0037:  GOTO   075
....................          display_led7seg(count);     
0038:  MOVF   2A,W
0039:  MOVWF  2C
*
0074:  GOTO   033
0075:  INCF   2A,F
0076:  GOTO   02E
....................    }  
0077:  BCF    0A.3
0078:  BCF    0A.4
0079:  GOTO   09B (RETURN)
.................... } 
....................  
....................  
.................... void main() 
007A:  MOVF   03,W
007B:  ANDLW  1F
007C:  MOVWF  03
007D:  BSF    03.5
007E:  BSF    1F.0
007F:  BSF    1F.1
0080:  BSF    1F.2
0081:  BCF    1F.3
0082:  MOVLW  07
0083:  MOVWF  1C
0084:  BCF    03.7
.................... {   
....................    while (TRUE) 
....................    { 
....................       //TODO: User Code 
....................       countUp();           
*
009A:  GOTO   02D
009B:  GOTO   09A
....................    } 
.................... } 
009C:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
