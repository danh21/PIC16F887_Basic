CCS PCM C Compiler, Version 5.015, 5967               15-Sep-23 21:49

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\count_2numbers_74HC595\main\main.lst

               ROM used:   385 words (5%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           24 (7%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   15C
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVF   31,W
0005:  CLRF   78
0006:  SUBWF  30,W
0007:  BTFSC  03.0
0008:  GOTO   00C
0009:  MOVF   30,W
000A:  MOVWF  77
000B:  GOTO   018
000C:  CLRF   77
000D:  MOVLW  08
000E:  MOVWF  32
000F:  RLF    30,F
0010:  RLF    77,F
0011:  MOVF   31,W
0012:  SUBWF  77,W
0013:  BTFSC  03.0
0014:  MOVWF  77
0015:  RLF    78,F
0016:  DECFSZ 32,F
0017:  GOTO   00F
0018:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0104:  MOVLW  30
0105:  MOVWF  04
0106:  BCF    03.7
0107:  MOVF   00,W
0108:  BTFSC  03.2
0109:  GOTO   117
010A:  MOVLW  06
010B:  MOVWF  78
010C:  CLRF   77
010D:  DECFSZ 77,F
010E:  GOTO   10D
010F:  DECFSZ 78,F
0110:  GOTO   10C
0111:  MOVLW  7B
0112:  MOVWF  77
0113:  DECFSZ 77,F
0114:  GOTO   113
0115:  DECFSZ 00,F
0116:  GOTO   10A
0117:  RETURN
....................  
....................  
....................  
.................... #include "74HC595.h" 
.................... /* --------------------------------- CONFIG --------------------------------- */ 
.................... #define SH_CP  PIN_C0 
.................... #define DS     PIN_C1 
.................... #define ST_CP  PIN_C2 
.................... #define MR     PIN_C3 
....................  
....................  
....................  
.................... /* --------------------------------- FUNCTION --------------------------------- */ 
.................... #define Shift_CLK(x)    output_bit(SH_CP, x) 
.................... #define Serial_Data(x)  output_bit(DS, x) 
.................... #define Latch_CLK(x)    output_bit(ST_CP, x) 
....................  
.................... #define Shift_CLK_transition {Shift_CLK(0); Shift_CLK(1);} 
.................... #define Latch_CLK_transition {Latch_CLK(0); Latch_CLK(1);} 
.................... #define Reset                {output_bit(MR, 0); output_bit(MR, 1);}  
....................  
....................  
....................  
.................... void send_bit(int1 bit)             // send 1 bit 
.................... {  
....................    Serial_Data(bit); 
....................    Shift_CLK_transition;     
....................    Latch_CLK_transition; 
.................... } 
....................  
....................  
....................  
.................... void send_byte(int8 data)           // send 1 byte 
.................... { 
....................    Serial_Data((data >> 7) & 1); 
*
0019:  CLRF   77
001A:  BTFSC  31.7
001B:  BSF    77.0
001C:  MOVF   77,W
001D:  ANDLW  01
001E:  BTFSS  03.2
001F:  GOTO   022
0020:  BCF    07.1
0021:  GOTO   023
0022:  BSF    07.1
0023:  BCF    20.1
0024:  MOVF   20,W
0025:  BSF    03.5
0026:  MOVWF  07
....................    Shift_CLK_transition; 
0027:  BCF    03.5
0028:  BCF    07.0
0029:  BCF    20.0
002A:  MOVF   20,W
002B:  BSF    03.5
002C:  MOVWF  07
002D:  BCF    03.5
002E:  BSF    07.0
002F:  BCF    20.0
0030:  MOVF   20,W
0031:  BSF    03.5
0032:  MOVWF  07
....................     
....................    Serial_Data((data >> 6) & 1); 
0033:  BCF    03.5
0034:  SWAPF  31,W
0035:  MOVWF  77
0036:  RRF    77,F
0037:  RRF    77,F
0038:  MOVLW  03
0039:  ANDWF  77,F
003A:  MOVF   77,W
003B:  ANDLW  01
003C:  BTFSS  03.2
003D:  GOTO   040
003E:  BCF    07.1
003F:  GOTO   041
0040:  BSF    07.1
0041:  BCF    20.1
0042:  MOVF   20,W
0043:  BSF    03.5
0044:  MOVWF  07
....................    Shift_CLK_transition; 
0045:  BCF    03.5
0046:  BCF    07.0
0047:  BCF    20.0
0048:  MOVF   20,W
0049:  BSF    03.5
004A:  MOVWF  07
004B:  BCF    03.5
004C:  BSF    07.0
004D:  BCF    20.0
004E:  MOVF   20,W
004F:  BSF    03.5
0050:  MOVWF  07
....................     
....................    Serial_Data((data >> 5) & 1); 
0051:  BCF    03.5
0052:  SWAPF  31,W
0053:  MOVWF  77
0054:  RRF    77,F
0055:  MOVLW  07
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  ANDLW  01
0059:  BTFSS  03.2
005A:  GOTO   05D
005B:  BCF    07.1
005C:  GOTO   05E
005D:  BSF    07.1
005E:  BCF    20.1
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
....................    Shift_CLK_transition; 
0062:  BCF    03.5
0063:  BCF    07.0
0064:  BCF    20.0
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
0068:  BCF    03.5
0069:  BSF    07.0
006A:  BCF    20.0
006B:  MOVF   20,W
006C:  BSF    03.5
006D:  MOVWF  07
....................     
....................    Serial_Data((data >> 4) & 1); 
006E:  BCF    03.5
006F:  SWAPF  31,W
0070:  MOVWF  77
0071:  MOVLW  0F
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  ANDLW  01
0075:  BTFSS  03.2
0076:  GOTO   079
0077:  BCF    07.1
0078:  GOTO   07A
0079:  BSF    07.1
007A:  BCF    20.1
007B:  MOVF   20,W
007C:  BSF    03.5
007D:  MOVWF  07
....................    Shift_CLK_transition; 
007E:  BCF    03.5
007F:  BCF    07.0
0080:  BCF    20.0
0081:  MOVF   20,W
0082:  BSF    03.5
0083:  MOVWF  07
0084:  BCF    03.5
0085:  BSF    07.0
0086:  BCF    20.0
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
....................     
....................    Serial_Data((data >> 3) & 1); 
008A:  BCF    03.5
008B:  RRF    31,W
008C:  MOVWF  77
008D:  RRF    77,F
008E:  RRF    77,F
008F:  MOVLW  1F
0090:  ANDWF  77,F
0091:  MOVF   77,W
0092:  ANDLW  01
0093:  BTFSS  03.2
0094:  GOTO   097
0095:  BCF    07.1
0096:  GOTO   098
0097:  BSF    07.1
0098:  BCF    20.1
0099:  MOVF   20,W
009A:  BSF    03.5
009B:  MOVWF  07
....................    Shift_CLK_transition; 
009C:  BCF    03.5
009D:  BCF    07.0
009E:  BCF    20.0
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
00A2:  BCF    03.5
00A3:  BSF    07.0
00A4:  BCF    20.0
00A5:  MOVF   20,W
00A6:  BSF    03.5
00A7:  MOVWF  07
....................     
....................    Serial_Data((data >> 2) & 1); 
00A8:  BCF    03.5
00A9:  RRF    31,W
00AA:  MOVWF  77
00AB:  RRF    77,F
00AC:  MOVLW  3F
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  ANDLW  01
00B0:  BTFSS  03.2
00B1:  GOTO   0B4
00B2:  BCF    07.1
00B3:  GOTO   0B5
00B4:  BSF    07.1
00B5:  BCF    20.1
00B6:  MOVF   20,W
00B7:  BSF    03.5
00B8:  MOVWF  07
....................    Shift_CLK_transition; 
00B9:  BCF    03.5
00BA:  BCF    07.0
00BB:  BCF    20.0
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
00BF:  BCF    03.5
00C0:  BSF    07.0
00C1:  BCF    20.0
00C2:  MOVF   20,W
00C3:  BSF    03.5
00C4:  MOVWF  07
....................     
....................    Serial_Data((data >> 1) & 1); 
00C5:  BCF    03.0
00C6:  BCF    03.5
00C7:  RRF    31,W
00C8:  ANDLW  01
00C9:  BTFSS  03.2
00CA:  GOTO   0CD
00CB:  BCF    07.1
00CC:  GOTO   0CE
00CD:  BSF    07.1
00CE:  BCF    20.1
00CF:  MOVF   20,W
00D0:  BSF    03.5
00D1:  MOVWF  07
....................    Shift_CLK_transition; 
00D2:  BCF    03.5
00D3:  BCF    07.0
00D4:  BCF    20.0
00D5:  MOVF   20,W
00D6:  BSF    03.5
00D7:  MOVWF  07
00D8:  BCF    03.5
00D9:  BSF    07.0
00DA:  BCF    20.0
00DB:  MOVF   20,W
00DC:  BSF    03.5
00DD:  MOVWF  07
....................     
....................    Serial_Data((data >> 0) & 1); 
00DE:  BCF    03.5
00DF:  MOVF   31,W
00E0:  ANDLW  01
00E1:  BTFSS  03.2
00E2:  GOTO   0E5
00E3:  BCF    07.1
00E4:  GOTO   0E6
00E5:  BSF    07.1
00E6:  BCF    20.1
00E7:  MOVF   20,W
00E8:  BSF    03.5
00E9:  MOVWF  07
....................    Shift_CLK_transition; 
00EA:  BCF    03.5
00EB:  BCF    07.0
00EC:  BCF    20.0
00ED:  MOVF   20,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  BCF    03.5
00F1:  BSF    07.0
00F2:  BCF    20.0
00F3:  MOVF   20,W
00F4:  BSF    03.5
00F5:  MOVWF  07
....................     
....................    Latch_CLK_transition; 
00F6:  BCF    03.5
00F7:  BCF    07.2
00F8:  BCF    20.2
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
00FC:  BCF    03.5
00FD:  BSF    07.2
00FE:  BCF    20.2
00FF:  MOVF   20,W
0100:  BSF    03.5
0101:  MOVWF  07
0102:  BCF    03.5
0103:  RETURN
.................... } 
....................  
....................  
....................  
.................... void send_bytes(int8 arrData[], int len)  // send many bytes      
.................... {  
....................    for (int i = 0; i < len; i++)  
....................       send_byte(arrData[i]); 
.................... } 
....................  
.................... #include "Led7seg_2dig.h" 
.................... #define Led7Seg_OUT(num) output_d(num) 
....................  
.................... #define Led7Seg1(b) output_bit(PIN_B0, b) 
.................... #define Led7Seg2(b) output_bit(PIN_B1, b) 
....................  
.................... #define scan_Led7Seg1 {Led7Seg2(1); Led7Seg1(0);} 
.................... #define scan_Led7Seg2 {Led7Seg1(1); Led7Seg2(0);} 
....................  
....................  
....................  
.................... unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
*
0169:  MOVLW  C0
016A:  BCF    03.5
016B:  MOVWF  21
016C:  MOVLW  F9
016D:  MOVWF  22
016E:  MOVLW  A4
016F:  MOVWF  23
0170:  MOVLW  B0
0171:  MOVWF  24
0172:  MOVLW  99
0173:  MOVWF  25
0174:  MOVLW  92
0175:  MOVWF  26
0176:  MOVLW  82
0177:  MOVWF  27
0178:  MOVLW  F8
0179:  MOVWF  28
017A:  MOVLW  80
017B:  MOVWF  29
017C:  MOVLW  90
017D:  MOVWF  2A
....................  
....................  
....................  
.................... void display_led7seg(int value)  
.................... { 
....................    int dozens, units; 
....................     
....................    dozens = value / 10; 
....................    units = value % 10; 
....................    
....................    scan_Led7Seg1;   
....................    Led7Seg_OUT(number[dozens]); 
....................    delay_ms(1); 
....................       
....................    scan_Led7Seg2; 
....................    Led7Seg_OUT(number[units]);     
....................    delay_ms(1);   
.................... } 
....................  
....................  
....................  
....................  
.................... void display_num(int value) 
.................... { 
....................    int dozens, units; 
....................     
....................    dozens = value / 10; 
*
0122:  MOVF   2D,W
0123:  MOVWF  30
0124:  MOVLW  0A
0125:  MOVWF  31
0126:  CALL   004
0127:  MOVF   78,W
0128:  MOVWF  2E
....................    units = value % 10; 
0129:  MOVF   2D,W
012A:  MOVWF  30
012B:  MOVLW  0A
012C:  MOVWF  31
012D:  CALL   004
012E:  MOVF   77,W
012F:  MOVWF  2F
....................    
....................    scan_Led7Seg1;   
0130:  BSF    06.1
0131:  BSF    03.5
0132:  BCF    06.1
0133:  BCF    03.5
0134:  BCF    06.0
0135:  BSF    03.5
0136:  BCF    06.0
....................    send_byte((int8)number[dozens]); 
0137:  MOVLW  21
0138:  BCF    03.5
0139:  ADDWF  2E,W
013A:  MOVWF  04
013B:  BCF    03.7
013C:  MOVF   00,W
013D:  MOVWF  30
013E:  MOVWF  31
013F:  CALL   019
....................    delay_ms(5); 
0140:  MOVLW  05
0141:  MOVWF  30
0142:  CALL   104
....................     
....................    scan_Led7Seg2; 
0143:  BSF    06.0
0144:  BSF    03.5
0145:  BCF    06.0
0146:  BCF    03.5
0147:  BCF    06.1
0148:  BSF    03.5
0149:  BCF    06.1
....................    send_byte((int8)number[units]);     
014A:  MOVLW  21
014B:  BCF    03.5
014C:  ADDWF  2F,W
014D:  MOVWF  04
014E:  BCF    03.7
014F:  MOVF   00,W
0150:  MOVWF  30
0151:  MOVWF  31
0152:  CALL   019
....................    delay_ms(5); 
0153:  MOVLW  05
0154:  MOVWF  30
0155:  CALL   104
.................... } 
....................  
....................  
....................  
.................... void countUp(void) 
.................... { 
....................    int count, t; 
....................     
....................    for (count = 0; count < 100; count++) { 
....................       t = 0; 
....................       while (t++ < 100)  
....................          display_num(count);     
....................    }  
.................... } 
....................  
....................  
....................  
.................... void countDown(void) 
.................... { 
....................    int count, t; 
....................     
....................    for (count = 99; count >= 0; count--) { 
*
0118:  MOVLW  63
0119:  MOVWF  2B
....................       t = 0; 
011A:  CLRF   2C
....................       while (t++ < 100)  
011B:  MOVF   2C,W
011C:  INCF   2C,F
011D:  SUBLW  63
011E:  BTFSS  03.0
011F:  GOTO   157
....................          display_num(count);     
0120:  MOVF   2B,W
0121:  MOVWF  2D
*
0156:  GOTO   11B
0157:  DECF   2B,F
0158:  GOTO   11A
....................    }  
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   17F (RETURN)
.................... } 
....................  
....................  
.................... void main() 
015C:  MOVF   03,W
015D:  ANDLW  1F
015E:  MOVWF  03
015F:  MOVLW  FF
0160:  MOVWF  20
0161:  BSF    03.5
0162:  BSF    1F.0
0163:  BSF    1F.1
0164:  BSF    1F.2
0165:  BCF    1F.3
0166:  MOVLW  07
0167:  MOVWF  1C
0168:  BCF    03.7
.................... {    
....................    while(TRUE) 
....................    { 
....................       countDown();   
*
017E:  GOTO   118
017F:  GOTO   17E
....................    } 
.................... } 
0180:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
