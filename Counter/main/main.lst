CCS PCM C Compiler, Version 5.015, 5967               16-Sep-23 10:28

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\countUpDown_2numbers_byBtns\main\main.lst

               ROM used:   423 words (5%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           24 (7%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   181
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVF   2F,W
0005:  XORWF  30,W
0006:  ANDLW  80
0007:  MOVWF  32
0008:  BTFSS  2F.7
0009:  GOTO   00C
000A:  COMF   2F,F
000B:  INCF   2F,F
000C:  BTFSS  30.7
000D:  GOTO   010
000E:  COMF   30,F
000F:  INCF   30,F
0010:  MOVF   30,W
0011:  CLRF   78
0012:  SUBWF  2F,W
0013:  BTFSC  03.0
0014:  GOTO   018
0015:  MOVF   2F,W
0016:  MOVWF  77
0017:  GOTO   024
0018:  CLRF   77
0019:  MOVLW  08
001A:  MOVWF  31
001B:  RLF    2F,F
001C:  RLF    77,F
001D:  MOVF   30,W
001E:  SUBWF  77,W
001F:  BTFSC  03.0
0020:  MOVWF  77
0021:  RLF    78,F
0022:  DECFSZ 31,F
0023:  GOTO   01B
0024:  BTFSS  32.7
0025:  GOTO   028
0026:  COMF   78,F
0027:  INCF   78,F
0028:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES HS 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0114:  MOVLW  2F
0115:  MOVWF  04
0116:  BCF    03.7
0117:  MOVF   00,W
0118:  BTFSC  03.2
0119:  GOTO   127
011A:  MOVLW  06
011B:  MOVWF  78
011C:  CLRF   77
011D:  DECFSZ 77,F
011E:  GOTO   11D
011F:  DECFSZ 78,F
0120:  GOTO   11C
0121:  MOVLW  7B
0122:  MOVWF  77
0123:  DECFSZ 77,F
0124:  GOTO   123
0125:  DECFSZ 00,F
0126:  GOTO   11A
0127:  RETURN
....................  
....................  
....................  
.................... #include "74HC595.h" 
.................... /* --------------------------------- CONFIG --------------------------------- */ 
.................... #define SH_CP  PIN_C0 
.................... #define DS     PIN_C1 
.................... #define ST_CP  PIN_C2 
.................... #define MR     PIN_C3 
....................  
....................  
....................  
.................... /* --------------------------------- FUNCTION --------------------------------- */ 
.................... #define Shift_CLK(x)    output_bit(SH_CP, x) 
.................... #define Serial_Data(x)  output_bit(DS, x) 
.................... #define Latch_CLK(x)    output_bit(ST_CP, x) 
....................  
.................... #define Shift_CLK_transition {Shift_CLK(0); Shift_CLK(1);} 
.................... #define Latch_CLK_transition {Latch_CLK(0); Latch_CLK(1);} 
.................... #define Reset                {output_bit(MR, 0); output_bit(MR, 1);}  
....................  
....................  
....................  
.................... void send_bit(int1 bit)             // send 1 bit 
.................... {  
....................    Serial_Data(bit); 
....................    Shift_CLK_transition;     
....................    Latch_CLK_transition; 
.................... } 
....................  
....................  
....................  
.................... void send_byte(int8 data)           // send 1 byte 
.................... { 
....................    Serial_Data((data >> 7) & 1); 
*
0029:  CLRF   77
002A:  BTFSC  30.7
002B:  BSF    77.0
002C:  MOVF   77,W
002D:  ANDLW  01
002E:  BTFSS  03.2
002F:  GOTO   032
0030:  BCF    07.1
0031:  GOTO   033
0032:  BSF    07.1
0033:  BCF    20.1
0034:  MOVF   20,W
0035:  BSF    03.5
0036:  MOVWF  07
....................    Shift_CLK_transition; 
0037:  BCF    03.5
0038:  BCF    07.0
0039:  BCF    20.0
003A:  MOVF   20,W
003B:  BSF    03.5
003C:  MOVWF  07
003D:  BCF    03.5
003E:  BSF    07.0
003F:  BCF    20.0
0040:  MOVF   20,W
0041:  BSF    03.5
0042:  MOVWF  07
....................     
....................    Serial_Data((data >> 6) & 1); 
0043:  BCF    03.5
0044:  SWAPF  30,W
0045:  MOVWF  77
0046:  RRF    77,F
0047:  RRF    77,F
0048:  MOVLW  03
0049:  ANDWF  77,F
004A:  MOVF   77,W
004B:  ANDLW  01
004C:  BTFSS  03.2
004D:  GOTO   050
004E:  BCF    07.1
004F:  GOTO   051
0050:  BSF    07.1
0051:  BCF    20.1
0052:  MOVF   20,W
0053:  BSF    03.5
0054:  MOVWF  07
....................    Shift_CLK_transition; 
0055:  BCF    03.5
0056:  BCF    07.0
0057:  BCF    20.0
0058:  MOVF   20,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  BCF    03.5
005C:  BSF    07.0
005D:  BCF    20.0
005E:  MOVF   20,W
005F:  BSF    03.5
0060:  MOVWF  07
....................     
....................    Serial_Data((data >> 5) & 1); 
0061:  BCF    03.5
0062:  SWAPF  30,W
0063:  MOVWF  77
0064:  RRF    77,F
0065:  MOVLW  07
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  ANDLW  01
0069:  BTFSS  03.2
006A:  GOTO   06D
006B:  BCF    07.1
006C:  GOTO   06E
006D:  BSF    07.1
006E:  BCF    20.1
006F:  MOVF   20,W
0070:  BSF    03.5
0071:  MOVWF  07
....................    Shift_CLK_transition; 
0072:  BCF    03.5
0073:  BCF    07.0
0074:  BCF    20.0
0075:  MOVF   20,W
0076:  BSF    03.5
0077:  MOVWF  07
0078:  BCF    03.5
0079:  BSF    07.0
007A:  BCF    20.0
007B:  MOVF   20,W
007C:  BSF    03.5
007D:  MOVWF  07
....................     
....................    Serial_Data((data >> 4) & 1); 
007E:  BCF    03.5
007F:  SWAPF  30,W
0080:  MOVWF  77
0081:  MOVLW  0F
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  ANDLW  01
0085:  BTFSS  03.2
0086:  GOTO   089
0087:  BCF    07.1
0088:  GOTO   08A
0089:  BSF    07.1
008A:  BCF    20.1
008B:  MOVF   20,W
008C:  BSF    03.5
008D:  MOVWF  07
....................    Shift_CLK_transition; 
008E:  BCF    03.5
008F:  BCF    07.0
0090:  BCF    20.0
0091:  MOVF   20,W
0092:  BSF    03.5
0093:  MOVWF  07
0094:  BCF    03.5
0095:  BSF    07.0
0096:  BCF    20.0
0097:  MOVF   20,W
0098:  BSF    03.5
0099:  MOVWF  07
....................     
....................    Serial_Data((data >> 3) & 1); 
009A:  BCF    03.5
009B:  RRF    30,W
009C:  MOVWF  77
009D:  RRF    77,F
009E:  RRF    77,F
009F:  MOVLW  1F
00A0:  ANDWF  77,F
00A1:  MOVF   77,W
00A2:  ANDLW  01
00A3:  BTFSS  03.2
00A4:  GOTO   0A7
00A5:  BCF    07.1
00A6:  GOTO   0A8
00A7:  BSF    07.1
00A8:  BCF    20.1
00A9:  MOVF   20,W
00AA:  BSF    03.5
00AB:  MOVWF  07
....................    Shift_CLK_transition; 
00AC:  BCF    03.5
00AD:  BCF    07.0
00AE:  BCF    20.0
00AF:  MOVF   20,W
00B0:  BSF    03.5
00B1:  MOVWF  07
00B2:  BCF    03.5
00B3:  BSF    07.0
00B4:  BCF    20.0
00B5:  MOVF   20,W
00B6:  BSF    03.5
00B7:  MOVWF  07
....................     
....................    Serial_Data((data >> 2) & 1); 
00B8:  BCF    03.5
00B9:  RRF    30,W
00BA:  MOVWF  77
00BB:  RRF    77,F
00BC:  MOVLW  3F
00BD:  ANDWF  77,F
00BE:  MOVF   77,W
00BF:  ANDLW  01
00C0:  BTFSS  03.2
00C1:  GOTO   0C4
00C2:  BCF    07.1
00C3:  GOTO   0C5
00C4:  BSF    07.1
00C5:  BCF    20.1
00C6:  MOVF   20,W
00C7:  BSF    03.5
00C8:  MOVWF  07
....................    Shift_CLK_transition; 
00C9:  BCF    03.5
00CA:  BCF    07.0
00CB:  BCF    20.0
00CC:  MOVF   20,W
00CD:  BSF    03.5
00CE:  MOVWF  07
00CF:  BCF    03.5
00D0:  BSF    07.0
00D1:  BCF    20.0
00D2:  MOVF   20,W
00D3:  BSF    03.5
00D4:  MOVWF  07
....................     
....................    Serial_Data((data >> 1) & 1); 
00D5:  BCF    03.0
00D6:  BCF    03.5
00D7:  RRF    30,W
00D8:  ANDLW  01
00D9:  BTFSS  03.2
00DA:  GOTO   0DD
00DB:  BCF    07.1
00DC:  GOTO   0DE
00DD:  BSF    07.1
00DE:  BCF    20.1
00DF:  MOVF   20,W
00E0:  BSF    03.5
00E1:  MOVWF  07
....................    Shift_CLK_transition; 
00E2:  BCF    03.5
00E3:  BCF    07.0
00E4:  BCF    20.0
00E5:  MOVF   20,W
00E6:  BSF    03.5
00E7:  MOVWF  07
00E8:  BCF    03.5
00E9:  BSF    07.0
00EA:  BCF    20.0
00EB:  MOVF   20,W
00EC:  BSF    03.5
00ED:  MOVWF  07
....................     
....................    Serial_Data((data >> 0) & 1); 
00EE:  BCF    03.5
00EF:  MOVF   30,W
00F0:  ANDLW  01
00F1:  BTFSS  03.2
00F2:  GOTO   0F5
00F3:  BCF    07.1
00F4:  GOTO   0F6
00F5:  BSF    07.1
00F6:  BCF    20.1
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
....................    Shift_CLK_transition; 
00FA:  BCF    03.5
00FB:  BCF    07.0
00FC:  BCF    20.0
00FD:  MOVF   20,W
00FE:  BSF    03.5
00FF:  MOVWF  07
0100:  BCF    03.5
0101:  BSF    07.0
0102:  BCF    20.0
0103:  MOVF   20,W
0104:  BSF    03.5
0105:  MOVWF  07
....................     
....................    Latch_CLK_transition; 
0106:  BCF    03.5
0107:  BCF    07.2
0108:  BCF    20.2
0109:  MOVF   20,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BSF    07.2
010E:  BCF    20.2
010F:  MOVF   20,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  BCF    03.5
0113:  RETURN
.................... } 
....................  
....................  
....................  
.................... void send_bytes(int8 arrData[], int len)  // send many bytes      
.................... {  
....................    for (int i = 0; i < len; i++)  
....................       send_byte(arrData[i]); 
.................... } 
....................  
.................... #include "Led7seg_2dig.h" 
.................... #define Led7Seg_OUT(num) output_d(num) 
....................  
.................... #define Led7Seg1(b) output_bit(PIN_B0, b) 
.................... #define Led7Seg2(b) output_bit(PIN_B1, b) 
....................  
.................... #define scan_Led7Seg1 {Led7Seg2(1); Led7Seg1(0);} 
.................... #define scan_Led7Seg2 {Led7Seg1(1); Led7Seg2(0);} 
....................  
....................  
....................  
.................... unsigned char number[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90}; 
*
018F:  MOVLW  C0
0190:  BCF    03.5
0191:  MOVWF  21
0192:  MOVLW  F9
0193:  MOVWF  22
0194:  MOVLW  A4
0195:  MOVWF  23
0196:  MOVLW  B0
0197:  MOVWF  24
0198:  MOVLW  99
0199:  MOVWF  25
019A:  MOVLW  92
019B:  MOVWF  26
019C:  MOVLW  82
019D:  MOVWF  27
019E:  MOVLW  F8
019F:  MOVWF  28
01A0:  MOVLW  80
01A1:  MOVWF  29
01A2:  MOVLW  90
01A3:  MOVWF  2A
....................  
....................  
....................  
.................... void display_led7seg(int value)  
.................... { 
....................    int dozens, units; 
....................     
....................    dozens = value / 10; 
....................    units = value % 10; 
....................    
....................    scan_Led7Seg1;   
....................    Led7Seg_OUT(number[dozens]); 
....................    delay_ms(1); 
....................       
....................    scan_Led7Seg2; 
....................    Led7Seg_OUT(number[units]);     
....................    delay_ms(1);   
.................... } 
....................  
....................  
.................... #define upBtn input(PIN_B2) 
.................... #define downBtn input(PIN_B3) 
....................  
.................... signed int count = 0; 
....................  
....................  
....................  
.................... void display_num(signed int value) 
.................... { 
....................    int dozens, units; 
....................     
....................    dozens = value / 10; 
*
014A:  MOVF   2C,W
014B:  MOVWF  2F
014C:  MOVLW  0A
014D:  MOVWF  30
014E:  CALL   004
014F:  MOVF   78,W
0150:  MOVWF  2D
....................    units = value % 10; 
0151:  MOVF   2C,W
0152:  MOVWF  2F
0153:  MOVLW  0A
0154:  MOVWF  30
0155:  CALL   004
0156:  MOVF   77,W
0157:  MOVWF  2E
....................    
....................    scan_Led7Seg1;   
0158:  BSF    06.1
0159:  BSF    03.5
015A:  BCF    06.1
015B:  BCF    03.5
015C:  BCF    06.0
015D:  BSF    03.5
015E:  BCF    06.0
....................    send_byte(number[dozens]); 
015F:  MOVLW  21
0160:  BCF    03.5
0161:  ADDWF  2D,W
0162:  MOVWF  04
0163:  BCF    03.7
0164:  MOVF   00,W
0165:  MOVWF  2F
0166:  MOVWF  30
0167:  CALL   029
....................    delay_ms(5); 
0168:  MOVLW  05
0169:  MOVWF  2F
016A:  CALL   114
....................       
....................    scan_Led7Seg2; 
016B:  BSF    06.0
016C:  BSF    03.5
016D:  BCF    06.0
016E:  BCF    03.5
016F:  BCF    06.1
0170:  BSF    03.5
0171:  BCF    06.1
....................    send_byte(number[units]);     
0172:  MOVLW  21
0173:  BCF    03.5
0174:  ADDWF  2E,W
0175:  MOVWF  04
0176:  BCF    03.7
0177:  MOVF   00,W
0178:  MOVWF  2F
0179:  MOVWF  30
017A:  CALL   029
....................    delay_ms(5); 
017B:  MOVLW  05
017C:  MOVWF  2F
017D:  CALL   114
.................... } 
....................  
....................  
....................  
.................... void counter(void) 
.................... { 
....................    if (upBtn) { 
*
0128:  BSF    03.5
0129:  BSF    06.2
012A:  BCF    03.5
012B:  BTFSS  06.2
012C:  GOTO   137
....................       while (upBtn); 
012D:  BSF    03.5
012E:  BSF    06.2
012F:  BCF    03.5
0130:  BTFSC  06.2
0131:  GOTO   12D
....................       count++; 
0132:  INCF   2B,F
....................       if (count == 100) 
0133:  MOVF   2B,W
0134:  SUBLW  64
0135:  BTFSC  03.2
....................          count = 0; 
0136:  CLRF   2B
....................    } 
....................     
....................    if (downBtn) { 
0137:  BSF    03.5
0138:  BSF    06.3
0139:  BCF    03.5
013A:  BTFSS  06.3
013B:  GOTO   148
....................       while (downBtn); 
013C:  BSF    03.5
013D:  BSF    06.3
013E:  BCF    03.5
013F:  BTFSC  06.3
0140:  GOTO   13C
....................       count--; 
0141:  DECF   2B,F
....................       if (count == -1) 
0142:  MOVF   2B,W
0143:  SUBLW  FF
0144:  BTFSS  03.2
0145:  GOTO   148
....................          count = 99; 
0146:  MOVLW  63
0147:  MOVWF  2B
....................    } 
....................     
....................    display_num(count); 
0148:  MOVF   2B,W
0149:  MOVWF  2C
*
017E:  BCF    0A.3
017F:  BCF    0A.4
0180:  GOTO   1A5 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void main() 
0181:  MOVF   03,W
0182:  ANDLW  1F
0183:  MOVWF  03
0184:  MOVLW  FF
0185:  MOVWF  20
0186:  CLRF   2B
0187:  BSF    03.5
0188:  BSF    1F.0
0189:  BSF    1F.1
018A:  BSF    1F.2
018B:  BCF    1F.3
018C:  MOVLW  07
018D:  MOVWF  1C
018E:  BCF    03.7
.................... { 
....................    while(TRUE) 
....................    { 
....................       counter(); 
*
01A4:  GOTO   128
01A5:  GOTO   1A4
....................    } 
.................... } 
01A6:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
