CCS PCM C Compiler, Version 5.015, 5967               10-Sep-23 17:09

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\74hc595_ctrl_leds\main\main.lst

               ROM used:   390 words (5%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           16 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   156
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20M) 
*
0102:  MOVLW  25
0103:  MOVWF  04
0104:  BCF    03.7
0105:  MOVF   00,W
0106:  BTFSC  03.2
0107:  GOTO   115
0108:  MOVLW  06
0109:  MOVWF  78
010A:  CLRF   77
010B:  DECFSZ 77,F
010C:  GOTO   10B
010D:  DECFSZ 78,F
010E:  GOTO   10A
010F:  MOVLW  7B
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
0113:  DECFSZ 00,F
0114:  GOTO   108
0115:  RETURN
....................  
....................  
....................  
.................... #include "74HC595.h" 
.................... /* --------------------------------- CONFIG --------------------------------- */ 
.................... #define SH_CP  PIN_C0 
.................... #define DS     PIN_C1 
.................... #define ST_CP  PIN_C2 
.................... #define MR     PIN_C3 
....................  
....................  
....................  
.................... /* --------------------------------- FUNCTION --------------------------------- */ 
.................... #define Shift_CLK(x)    output_bit(SH_CP, x) 
.................... #define Serial_Data(x)  output_bit(DS, x) 
.................... #define Latch_CLK(x)    output_bit(ST_CP, x) 
....................  
.................... #define Shift_CLK_transition {Shift_CLK(0); Shift_CLK(1);} 
.................... #define Latch_CLK_transition {Latch_CLK(0); Latch_CLK(1);} 
.................... #define Reset                {output_bit(MR, 0); output_bit(MR, 1);}  
....................  
....................  
....................  
.................... void send_bit(int1 bit)             // send 1 bit 
.................... {  
....................    Serial_Data(bit); 
0116:  MOVF   25,F
0117:  BTFSS  03.2
0118:  GOTO   11B
0119:  BCF    07.1
011A:  GOTO   11C
011B:  BSF    07.1
011C:  BCF    20.1
011D:  MOVF   20,W
011E:  BSF    03.5
011F:  MOVWF  07
....................    Shift_CLK_transition;     
0120:  BCF    03.5
0121:  BCF    07.0
0122:  BCF    20.0
0123:  MOVF   20,W
0124:  BSF    03.5
0125:  MOVWF  07
0126:  BCF    03.5
0127:  BSF    07.0
0128:  BCF    20.0
0129:  MOVF   20,W
012A:  BSF    03.5
012B:  MOVWF  07
....................    Latch_CLK_transition; 
012C:  BCF    03.5
012D:  BCF    07.2
012E:  BCF    20.2
012F:  MOVF   20,W
0130:  BSF    03.5
0131:  MOVWF  07
0132:  BCF    03.5
0133:  BSF    07.2
0134:  BCF    20.2
0135:  MOVF   20,W
0136:  BSF    03.5
0137:  MOVWF  07
0138:  BCF    03.5
0139:  RETURN
.................... } 
....................  
....................  
....................  
.................... void send_byte(int8 data)           // send 1 byte 
.................... { 
....................    Serial_Data((data >> 7) & 1); 
*
0013:  CLRF   77
0014:  BTFSC  29.7
0015:  BSF    77.0
0016:  MOVF   77,W
0017:  ANDLW  01
0018:  BTFSS  03.2
0019:  GOTO   01C
001A:  BCF    07.1
001B:  GOTO   01D
001C:  BSF    07.1
001D:  BCF    20.1
001E:  MOVF   20,W
001F:  BSF    03.5
0020:  MOVWF  07
....................    Shift_CLK_transition; 
0021:  BCF    03.5
0022:  BCF    07.0
0023:  BCF    20.0
0024:  MOVF   20,W
0025:  BSF    03.5
0026:  MOVWF  07
0027:  BCF    03.5
0028:  BSF    07.0
0029:  BCF    20.0
002A:  MOVF   20,W
002B:  BSF    03.5
002C:  MOVWF  07
....................     
....................    Serial_Data((data >> 6) & 1); 
002D:  BCF    03.5
002E:  SWAPF  29,W
002F:  MOVWF  77
0030:  RRF    77,F
0031:  RRF    77,F
0032:  MOVLW  03
0033:  ANDWF  77,F
0034:  MOVF   77,W
0035:  ANDLW  01
0036:  BTFSS  03.2
0037:  GOTO   03A
0038:  BCF    07.1
0039:  GOTO   03B
003A:  BSF    07.1
003B:  BCF    20.1
003C:  MOVF   20,W
003D:  BSF    03.5
003E:  MOVWF  07
....................    Shift_CLK_transition; 
003F:  BCF    03.5
0040:  BCF    07.0
0041:  BCF    20.0
0042:  MOVF   20,W
0043:  BSF    03.5
0044:  MOVWF  07
0045:  BCF    03.5
0046:  BSF    07.0
0047:  BCF    20.0
0048:  MOVF   20,W
0049:  BSF    03.5
004A:  MOVWF  07
....................     
....................    Serial_Data((data >> 5) & 1); 
004B:  BCF    03.5
004C:  SWAPF  29,W
004D:  MOVWF  77
004E:  RRF    77,F
004F:  MOVLW  07
0050:  ANDWF  77,F
0051:  MOVF   77,W
0052:  ANDLW  01
0053:  BTFSS  03.2
0054:  GOTO   057
0055:  BCF    07.1
0056:  GOTO   058
0057:  BSF    07.1
0058:  BCF    20.1
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
....................    Shift_CLK_transition; 
005C:  BCF    03.5
005D:  BCF    07.0
005E:  BCF    20.0
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  BCF    03.5
0063:  BSF    07.0
0064:  BCF    20.0
0065:  MOVF   20,W
0066:  BSF    03.5
0067:  MOVWF  07
....................     
....................    Serial_Data((data >> 4) & 1); 
0068:  BCF    03.5
0069:  SWAPF  29,W
006A:  MOVWF  77
006B:  MOVLW  0F
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  ANDLW  01
006F:  BTFSS  03.2
0070:  GOTO   073
0071:  BCF    07.1
0072:  GOTO   074
0073:  BSF    07.1
0074:  BCF    20.1
0075:  MOVF   20,W
0076:  BSF    03.5
0077:  MOVWF  07
....................    Shift_CLK_transition; 
0078:  BCF    03.5
0079:  BCF    07.0
007A:  BCF    20.0
007B:  MOVF   20,W
007C:  BSF    03.5
007D:  MOVWF  07
007E:  BCF    03.5
007F:  BSF    07.0
0080:  BCF    20.0
0081:  MOVF   20,W
0082:  BSF    03.5
0083:  MOVWF  07
....................     
....................    Serial_Data((data >> 3) & 1); 
0084:  BCF    03.5
0085:  RRF    29,W
0086:  MOVWF  77
0087:  RRF    77,F
0088:  RRF    77,F
0089:  MOVLW  1F
008A:  ANDWF  77,F
008B:  MOVF   77,W
008C:  ANDLW  01
008D:  BTFSS  03.2
008E:  GOTO   091
008F:  BCF    07.1
0090:  GOTO   092
0091:  BSF    07.1
0092:  BCF    20.1
0093:  MOVF   20,W
0094:  BSF    03.5
0095:  MOVWF  07
....................    Shift_CLK_transition; 
0096:  BCF    03.5
0097:  BCF    07.0
0098:  BCF    20.0
0099:  MOVF   20,W
009A:  BSF    03.5
009B:  MOVWF  07
009C:  BCF    03.5
009D:  BSF    07.0
009E:  BCF    20.0
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
....................     
....................    Serial_Data((data >> 2) & 1); 
00A2:  BCF    03.5
00A3:  RRF    29,W
00A4:  MOVWF  77
00A5:  RRF    77,F
00A6:  MOVLW  3F
00A7:  ANDWF  77,F
00A8:  MOVF   77,W
00A9:  ANDLW  01
00AA:  BTFSS  03.2
00AB:  GOTO   0AE
00AC:  BCF    07.1
00AD:  GOTO   0AF
00AE:  BSF    07.1
00AF:  BCF    20.1
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
....................    Shift_CLK_transition; 
00B3:  BCF    03.5
00B4:  BCF    07.0
00B5:  BCF    20.0
00B6:  MOVF   20,W
00B7:  BSF    03.5
00B8:  MOVWF  07
00B9:  BCF    03.5
00BA:  BSF    07.0
00BB:  BCF    20.0
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
....................     
....................    Serial_Data((data >> 1) & 1); 
00BF:  BCF    03.0
00C0:  BCF    03.5
00C1:  RRF    29,W
00C2:  ANDLW  01
00C3:  BTFSS  03.2
00C4:  GOTO   0C7
00C5:  BCF    07.1
00C6:  GOTO   0C8
00C7:  BSF    07.1
00C8:  BCF    20.1
00C9:  MOVF   20,W
00CA:  BSF    03.5
00CB:  MOVWF  07
....................    Shift_CLK_transition; 
00CC:  BCF    03.5
00CD:  BCF    07.0
00CE:  BCF    20.0
00CF:  MOVF   20,W
00D0:  BSF    03.5
00D1:  MOVWF  07
00D2:  BCF    03.5
00D3:  BSF    07.0
00D4:  BCF    20.0
00D5:  MOVF   20,W
00D6:  BSF    03.5
00D7:  MOVWF  07
....................     
....................    Serial_Data((data >> 0) & 1); 
00D8:  BCF    03.5
00D9:  MOVF   29,W
00DA:  ANDLW  01
00DB:  BTFSS  03.2
00DC:  GOTO   0DF
00DD:  BCF    07.1
00DE:  GOTO   0E0
00DF:  BSF    07.1
00E0:  BCF    20.1
00E1:  MOVF   20,W
00E2:  BSF    03.5
00E3:  MOVWF  07
....................    Shift_CLK_transition; 
00E4:  BCF    03.5
00E5:  BCF    07.0
00E6:  BCF    20.0
00E7:  MOVF   20,W
00E8:  BSF    03.5
00E9:  MOVWF  07
00EA:  BCF    03.5
00EB:  BSF    07.0
00EC:  BCF    20.0
00ED:  MOVF   20,W
00EE:  BSF    03.5
00EF:  MOVWF  07
....................     
....................    Latch_CLK_transition; 
00F0:  BCF    03.5
00F1:  BCF    07.2
00F2:  BCF    20.2
00F3:  MOVF   20,W
00F4:  BSF    03.5
00F5:  MOVWF  07
00F6:  BCF    03.5
00F7:  BSF    07.2
00F8:  BCF    20.2
00F9:  MOVF   20,W
00FA:  BSF    03.5
00FB:  MOVWF  07
.................... } 
....................  
....................  
....................  
.................... void send_bytes(int8 arrData[], int len)  // send many bytes      
.................... {  
....................    for (int i = 0; i < len; i++)  
*
0004:  CLRF   27
0005:  MOVF   26,W
0006:  SUBWF  27,W
0007:  BTFSC  03.0
0008:  GOTO   0FF
....................       send_byte(arrData[i]); 
0009:  MOVF   27,W
000A:  ADDWF  24,W
000B:  MOVWF  04
000C:  BCF    03.7
000D:  BTFSC  25.0
000E:  BSF    03.7
000F:  MOVF   00,W
0010:  MOVWF  28
0011:  MOVF   28,W
0012:  MOVWF  29
*
00FC:  BCF    03.5
00FD:  INCF   27,F
00FE:  GOTO   005
00FF:  BCF    0A.3
0100:  BCF    0A.4
0101:  GOTO   170 (RETURN)
.................... } 
....................  
....................  
.................... #define numOfLeds 24 
....................  
....................  
....................  
.................... void lightUp_fadeDown() 
.................... { 
....................    int i; 
....................     
....................    for (i = 0; i < numOfLeds; i++) { 
*
013A:  CLRF   24
013B:  MOVF   24,W
013C:  SUBLW  17
013D:  BTFSS  03.0
013E:  GOTO   147
....................       send_bit(1); 
013F:  MOVLW  01
0140:  MOVWF  25
0141:  CALL   116
....................       delay_ms(200); 
0142:  MOVLW  C8
0143:  MOVWF  25
0144:  CALL   102
0145:  INCF   24,F
0146:  GOTO   13B
....................    } 
....................     
....................    for (i = 0; i < numOfLeds; i++) { 
0147:  CLRF   24
0148:  MOVF   24,W
0149:  SUBLW  17
014A:  BTFSS  03.0
014B:  GOTO   153
....................       send_bit(0); 
014C:  CLRF   25
014D:  CALL   116
....................       delay_ms(200); 
014E:  MOVLW  C8
014F:  MOVWF  25
0150:  CALL   102
0151:  INCF   24,F
0152:  GOTO   148
....................    } 
0153:  BCF    0A.3
0154:  BCF    0A.4
0155:  GOTO   184 (RETURN)
.................... } 
....................  
....................  
.................... void main() { 
0156:  MOVF   03,W
0157:  ANDLW  1F
0158:  MOVWF  03
0159:  MOVLW  FF
015A:  MOVWF  20
015B:  BSF    03.5
015C:  BSF    1F.0
015D:  BSF    1F.1
015E:  BSF    1F.2
015F:  BCF    1F.3
0160:  MOVLW  07
0161:  MOVWF  1C
0162:  BCF    03.7
....................    char arr[3] = {0x80, 0x55, 0x01}; 
0163:  MOVLW  80
0164:  BCF    03.5
0165:  MOVWF  21
0166:  MOVLW  55
0167:  MOVWF  22
0168:  MOVLW  01
0169:  MOVWF  23
....................     
....................    send_bytes(arr, 3); 
016A:  CLRF   25
016B:  MOVLW  21
016C:  MOVWF  24
016D:  MOVLW  03
016E:  MOVWF  26
016F:  GOTO   004
....................    delay_ms(1000); 
0170:  MOVLW  04
0171:  MOVWF  24
0172:  MOVLW  FA
0173:  MOVWF  25
0174:  CALL   102
0175:  DECFSZ 24,F
0176:  GOTO   172
....................    Reset; 
0177:  BCF    07.3
0178:  BCF    20.3
0179:  MOVF   20,W
017A:  BSF    03.5
017B:  MOVWF  07
017C:  BCF    03.5
017D:  BSF    07.3
017E:  BCF    20.3
017F:  MOVF   20,W
0180:  BSF    03.5
0181:  MOVWF  07
....................     
....................    while(TRUE) { 
....................       // on gradually, off gradually 
....................       lightUp_fadeDown(); 
0182:  BCF    03.5
0183:  GOTO   13A
0184:  GOTO   183
....................    } 
....................        
.................... } 
0185:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
