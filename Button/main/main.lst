CCS PCM C Compiler, Version 5.015, 5967               10-Sep-23 18:13

               Filename:   D:\cd\PIC_16F887A\Project\PIC C\alarm_antiTheft\main\main.lst

               ROM used:   64 words (1%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           5 (1%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
.................... #define on 1 
.................... #define off 0 
....................  
.................... #define sensor1 input(PIN_B1) 
.................... #define sensor2 input(PIN_B2) 
.................... #define rst input(PIN_B3) 
....................  
.................... #define led1(stt) output_bit(PIN_D0, stt) 
.................... #define led2(stt) output_bit(PIN_D2, stt) 
....................  
.................... #define buzzer1(stt) output_bit(PIN_D1, stt) 
.................... #define buzzer2(stt) output_bit(PIN_D3, stt) 
....................  
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
.................... {   
....................    while(TRUE) 
....................    { 
....................       //TODO: User Code 
....................       if (sensor1) { 
000F:  BSF    06.1
0010:  BCF    03.5
0011:  BTFSS  06.1
0012:  GOTO   01B
....................          led1(on); 
0013:  BSF    08.0
0014:  BSF    03.5
0015:  BCF    08.0
....................          buzzer1(on); 
0016:  BCF    03.5
0017:  BSF    08.1
0018:  BSF    03.5
0019:  BCF    08.1
001A:  BCF    03.5
....................       } 
....................        
....................       if (sensor2) { 
001B:  BSF    03.5
001C:  BSF    06.2
001D:  BCF    03.5
001E:  BTFSS  06.2
001F:  GOTO   028
....................          led2(on); 
0020:  BSF    08.2
0021:  BSF    03.5
0022:  BCF    08.2
....................          buzzer2(on); 
0023:  BCF    03.5
0024:  BSF    08.3
0025:  BSF    03.5
0026:  BCF    08.3
0027:  BCF    03.5
....................       } 
....................        
....................       if (rst) { 
0028:  BSF    03.5
0029:  BSF    06.3
002A:  BCF    03.5
002B:  BTFSS  06.3
002C:  GOTO   03D
....................          led1(off); 
002D:  BCF    08.0
002E:  BSF    03.5
002F:  BCF    08.0
....................          buzzer1(off); 
0030:  BCF    03.5
0031:  BCF    08.1
0032:  BSF    03.5
0033:  BCF    08.1
....................          led2(off); 
0034:  BCF    03.5
0035:  BCF    08.2
0036:  BSF    03.5
0037:  BCF    08.2
....................          buzzer2(off); 
0038:  BCF    03.5
0039:  BCF    08.3
003A:  BSF    03.5
003B:  BCF    08.3
003C:  BCF    03.5
....................       }     
003D:  BSF    03.5
003E:  GOTO   00F
....................    } 
.................... } 
003F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
